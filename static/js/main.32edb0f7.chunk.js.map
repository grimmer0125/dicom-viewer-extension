{"version":3,"sources":["utility.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["loadDicomAsync","file","a","Promise","resolve","reject","reader","FileReader","onload","fileContent","result","onabort","console","log","onerror","readAsArrayBuffer","fetchDicomAsync","url","indexOf","xhr","XMLHttpRequest","open","responseType","arrayBuffer","response","send","request","overrideMimeType","buffer","view","a_byte","data","responseText","ArrayBuffer","length","DataView","split","forEach","c","i","charCodeAt","setUint8","buffer2","NormalizationMode","fromEvent","require","WindowCenterWidthConst","AbdomenSoftTissues","W","L","SpineSoftTissues","SpineBone","Brain","Lungs","dropZoneStyle","borderWidth","borderColor","borderStyle","borderRadius","width","height","initialImageState","frameIndexes","currFrameIndex","multiFrameInfo","windowCenter","windowWidth","pixelMax","pixelMin","resX","resY","photometric","modality","hasDICOMExtension","isValidMouseDown","NormalizationComponent","props","mode","windowItem","currNormalizeMode","onChange","Checkbox","radio","label","name","value","checked","App","myCanvasRef","myCanvasRefSagittal","myCanvasRefCorona","files","isOnlineMode","currentImage","currentSeries","currentSeriesImageObjects","clientX","clientY","seriesGlobalMax","seriesGlobalMin","maxWidth","maxHeight","handleNormalizeModeChange","e","newMode","WindowCenter","getWindowCenter","getWindowWidth","newWindowCenter","newWindowWidth","setState","useWindowCenter","useWindowWidth","state","ifShowSagittalCoronal","currentCoronaNo","currentSagittalNo","renderFrame","image","frameIndex","buildSagittalView","buildCoronalView","renderImage","daikonImage","imageData","numFrames","daikon","parseImage","isEqual","getImageDirections","isCommonAxialView","getAcquiredSliceDirection","getNumberOfFrames","Array","from","v","k","text","arg","storeMax","storeMin","canvasRef","rawData","rawDataWidth","rawDataHeight","extraHeightScale","extraWidthScale","ifRGB","rgbMode","obj","getPhotometricInterpretation","getModality","trim","getPlanarConfig","toLowerCase","getInterpretedData","max","min","numCols","numRows","undefined","getNormalizationRange","current","document","createElement","ctx","getContext","imgData","createImageData","array","byteLength","pixelCount","j","Math","floor","putImageData","scale","resizeTotFit","c2","drawImage","error","fetchFile","currFilePath","decodeURI","checkDicomNameAndResetState","switchImage","currFileNo","buildAxialView","newFile","loadFile","switchSagittal","switchCorona","onDropFiles","acceptedFiles","sort","b","localeCompare","loadSeriesFilesToRender","totalFiles","handleSwitchFrame","onKeyDown","keyName","newFileNo","onMouseCanvasDown","event","window","addEventListener","onMouseMove","onMouseUp","removeEventListener","tmpWindowCenter","tmpWindowWidth","deltaX","deltaY","handleSeriesModeChange","seriesMode","ifWindowCenterMode","totalSagittalFrames","totalCoronaFrames","React","createRef","this","location","href","firstHash","fileURLs","substring","onOpenFileURLs","fileURLStr","index","push","clearRect","endsWith","promiseList","firstFile","fileList","all","bufferList","series","parserError","hasPixelData","images","addImage","getSeriesId","getSliceThickness","warn","buildSeries","reverse","globalMax","globalMin","w","getCols","firstSagittal","h","getRows","firstCoronal","firstImageNo","seriesObjects","i_image","j_sagittal","n_slice","i_row","spacing","getPixelSpacing","spaceH","sliceThickness","k_corona","i_column","spaceW","size","scaleW","scaleH","PixelHUMaxMin","info","allowRepeat","className","preventDropOnDocument","style","getDataTransferItems","evt","onDrop","display","flexDirection","justifyContent","alignItems","Radio","toggle","Dropdown","placeholder","selection","options","step","onMouseDown","ref","backgroundColor","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.32edb0f7.chunk.js","sourcesContent":["export async function loadDicomAsync(file: any) {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileContent = reader.result;\n      resolve(fileContent);\n      //   this.renderImage(fileContent);\n    };\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    // e.g. \"drag a folder\" will fail to read\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.readAsArrayBuffer(file);\n  });\n}\n\nexport async function fetchDicomAsync(url: string) {\n  return new Promise((resolve, reject) => {\n    if (url.indexOf(\"file://\") === 0) {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.onload = () => {\n        const arrayBuffer = xhr.response;\n        resolve(arrayBuffer);\n        // this.renderImage(arrayBuffer);\n      };\n      xhr.send();\n    } else {\n      // NOTE: copy from https://github.com/my-codeworks/tiff-viewer-extension/blob/master/background.js#L29\n      // TODO: figure it out why using arraybuffer will fail\n      console.log(\"Starting XHR request for\", url);\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", url, false);\n      request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n      request.send();\n      console.log(\"Finished XHR request\");\n      const data = request.responseText;\n      let buffer;\n      let view: DataView;\n      let a_byte;\n      buffer = new ArrayBuffer(data.length);\n      view = new DataView(buffer);\n      data.split(\"\").forEach((c, i) => {\n        a_byte = c.charCodeAt(0);\n        view.setUint8(i, a_byte & 0xff);\n      });\n      const buffer2 = view.buffer;\n      // this.renderImage(buffer2);\n      resolve(buffer2);\n    }\n  });\n\n  //   const promise = new Promise((resolve, reject) => {\n  //     this.commandDict[pipelineUrl] = { resolve, reject };\n  //   });\n}\n\nexport default {};\n","import React, { Component } from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\nimport { isEqual } from \"underscore\";\n\nimport {\n  Dropdown,\n  Checkbox,\n  CheckboxProps,\n  DropdownProps,\n  Radio,\n} from \"semantic-ui-react\";\n\nimport Dropzone from \"react-dropzone\";\nimport Hotkeys from \"react-hot-keys\";\nimport * as daikon from \"daikon\";\nimport { fetchDicomAsync, loadDicomAsync } from \"./utility\";\n\nconst { fromEvent } = require(\"file-selector\");\n\n// import { fromEvent } from \"file-selector\";\n\nenum NormalizationMode {\n  PixelHUMaxMin,\n  // below are for CT,\n  WindowCenter,\n  // https://radiopaedia.org/articles/windowing-ct\n  AbdomenSoftTissues, //W:400 L:50\n  SpineSoftTissues, // W:250 L:50\n  SpineBone, // W:1800 L:400\n  Brain, // W:80 L:40\n  Lungs, // W:1500 L:-600. chest\n  // AbdomenLiver, // W:150 L:30.\n  // Mediastinum, // W:350 L:50.\n  // head and neck series:\n  // Stroke W:8 L:32 or W:40 L:40 中風 head\n  // subdural W:130-300 L:50-100 腦硬膜\n  // temporal bones W:2800 L:600 顳骨\n  // soft tissues: W:350–400 L:20–60. head\n  // CTA (CT angiography) // https://www.stepwards.com/?page_id=21646 (W:600, L:170)\n}\n\ninterface WindowItem {\n  W: number;\n  L: number;\n}\n\ninterface IWindowDictionary {\n  [id: number]: WindowItem;\n}\n\nconst WindowCenterWidthConst: IWindowDictionary = {\n  [NormalizationMode.AbdomenSoftTissues]: {\n    W: 400,\n    L: 50,\n  },\n  [NormalizationMode.SpineSoftTissues]: {\n    W: 250,\n    L: 50,\n  },\n  [NormalizationMode.SpineBone]: {\n    W: 1800,\n    L: 400,\n  },\n  [NormalizationMode.Brain]: {\n    W: 80,\n    L: 40,\n  },\n  [NormalizationMode.Lungs]: {\n    W: 1500,\n    L: -600,\n  },\n};\n\nconst dropZoneStyle = {\n  borderWidth: 2,\n  borderColor: \"#666\",\n  borderStyle: \"dashed\",\n  borderRadius: 5,\n  width: 800,\n  height: 150,\n  // textAlign: \"center\",\n};\n\nconst initialImageState = {\n  frameIndexes: [],\n  currFrameIndex: 0,\n  multiFrameInfo: \"\",\n  windowCenter: 0,\n  windowWidth: -1,\n  pixelMax: 0,\n  pixelMin: 0,\n  resX: 0,\n  resY: 0,\n  photometric: \"\",\n  modality: \"\",\n  hasDICOMExtension: true,\n  isValidMouseDown: false, // reset when switching to a new image\n};\n\ntype State = {\n  currNormalizeMode: number;\n  ifWindowCenterMode: boolean;\n  currFilePath: string;\n  currFileNo: number;\n  totalFiles: number;\n  frameIndexes: any[];\n  currFrameIndex: number;\n  multiFrameInfo: string;\n  windowCenter: number;\n  windowWidth: number;\n  pixelMax: number; // pixel max\n  pixelMin: number; // pixel min\n  resX: number;\n  resY: number;\n  photometric: string;\n  modality: string;\n  hasDICOMExtension: boolean;\n  isValidMouseDown: boolean; // switch to another image, becomes invalid\n  useWindowCenter: number;\n  useWindowWidth: number;\n  ifShowSagittalCoronal: boolean;\n  currentSagittalNo: number; // start from 1\n  totalSagittalFrames: number;\n  currentCoronaNo: number;\n  totalCoronaFrames: number;\n  seriesMode: string;\n  isCommonAxialView: boolean;\n};\n\ninterface NormalizationProps {\n  mode: NormalizationMode;\n  windowItem?: WindowItem;\n  currNormalizeMode: NormalizationMode;\n  onChange?: (\n    e: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps\n  ) => void;\n}\n\nfunction NormalizationComponent(props: NormalizationProps) {\n  const { mode, windowItem, currNormalizeMode, onChange } = props;\n  const data = windowItem ?? WindowCenterWidthConst[mode] ?? null;\n  return (\n    <>\n      <Checkbox\n        radio\n        label={NormalizationMode[mode]}\n        name=\"checkboxRadioGroup\"\n        value={mode}\n        checked={currNormalizeMode === mode}\n        onChange={onChange}\n        // checked={ifWindowCenterMode}\n        // onChange={this.handleNormalizeModeChange}\n      />\n      {data ? ` c:${data.L}, w:${data.W}  ` : `  `}\n    </>\n  );\n}\n\nconst MAX_WIDTH_SINGLE_MODE = 1280;\nconst MAX_HEIGHT_SINGLE_MODE = 1000;\nconst MAX_WIDTH_SERIES_MODE = 400;\nconst MAX_HEIGHT_SERIES_MODE = 400;\n\nclass App extends Component<{}, State> {\n  myCanvasRef: React.RefObject<HTMLCanvasElement>;\n  myCanvasRefSagittal: React.RefObject<HTMLCanvasElement>;\n  myCanvasRefCorona: React.RefObject<HTMLCanvasElement>;\n  files: any[];\n  isOnlineMode = true;\n  currentImage: any;\n  currentSeries: any;\n  currentSeriesImageObjects: any[];\n  clientX: number;\n  clientY: number;\n  seriesGlobalMax: number;\n  seriesGlobalMin: number;\n  maxWidth = MAX_WIDTH_SINGLE_MODE;\n  maxHeight = MAX_HEIGHT_SINGLE_MODE;\n\n  constructor() {\n    super({});\n    this.state = {\n      currNormalizeMode: NormalizationMode.WindowCenter,\n      ifWindowCenterMode: true,\n      currFilePath: \"\",\n      ifShowSagittalCoronal: false,\n      useWindowCenter: 0,\n      useWindowWidth: -1,\n      seriesMode: \"notSeriesMode\",\n\n      // multiFrameInfo: '',\n      // currFrameIndex: 0,\n      // frameIndexes: [],\n      // windowCenter: '',\n      // windowWidth: '',\n      // max: '',\n      // min: '',\n      // resX: '',\n      // resY: '',\n      // photometric: '',\n      // modality: '',\n      isCommonAxialView: false,\n      currFileNo: 0,\n      totalFiles: 0,\n      currentSagittalNo: 0,\n      totalSagittalFrames: 0,\n      currentCoronaNo: 0,\n      totalCoronaFrames: 0,\n      ...initialImageState,\n    };\n    this.myCanvasRef = React.createRef();\n    this.myCanvasRefSagittal = React.createRef();\n    this.myCanvasRefCorona = React.createRef();\n    this.files = [];\n    this.currentSeriesImageObjects = [];\n    this.clientX = 0;\n    this.clientY = 0;\n    this.seriesGlobalMax = 0;\n    this.seriesGlobalMin = 0;\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"mouseup\", this.onMouseUp);\n    // window.addEventListener(\"mouseup\", this.onMouseUp);\n\n    // get file path from current url, e.g.\n    // chrome-extension://jfnlfimghfiagibfigmlopnfljpfnnje/dicom.html#file:///tmp/test.dcm\n    const url = window.location.href;\n    // 'http://localhost#http://medistim.com/wp-content/uploads/2016/07/ttfm.dcm'; //\n    // console.log(\"current url:\", url);\n\n    if (\n      url.toLowerCase().indexOf(\".dcm\") !== -1 ||\n      url.toLowerCase().indexOf(\".dicom\") !== -1\n    ) {\n      // const paths = url.split(\"#\");\n      const firstHash = url.indexOf(\"#\");\n      if (firstHash > -1) {\n        const fileURLs = url.substring(firstHash + 1, url.length);\n        // const filePath = paths[1];\n        // this.fetchFile(filePath);\n\n        this.onOpenFileURLs(fileURLs);\n      }\n    }\n  }\n\n  // NOTE:\n  // when switch to new image, keeps mode and useWindowWidth will not reset (if not same seris, a little wired)\n  // switch to new frame (same image)? keeps mode and useWindowWidth will not reset\n  // swtich to different mode (useWindowWidth will be reset )\n\n  handleNormalizeModeChange = (\n    e: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps\n  ) => {\n    const { value } = data;\n\n    // console.log(\"value:\", typeof value, value);\n    // let ifWindowCenterMode;\n    // if (value === \"center\") {\n    //   ifWindowCenterMode = true;\n    // } else {\n    //   ifWindowCenterMode = false;\n    // }\n\n    // this.setState({ ifWindowCenterMode });\n\n    if (this.currentImage) {\n      let windowCenter;\n      let windowWidth;\n\n      const newMode = value as number;\n      if (newMode === NormalizationMode.WindowCenter) {\n        windowCenter = this.currentImage.getWindowCenter() as number;\n        windowWidth = this.currentImage.getWindowWidth() as number;\n      }\n      const newWindowCenter = windowCenter ? windowCenter : 0;\n      const newWindowWidth = windowWidth ? windowWidth : -1;\n      this.setState({\n        useWindowCenter: newWindowCenter,\n        useWindowWidth: newWindowWidth,\n        currNormalizeMode: newMode,\n      });\n\n      const {\n        currFrameIndex,\n        ifShowSagittalCoronal,\n        currentCoronaNo,\n        currentSagittalNo,\n      } = this.state;\n      this.renderFrame({\n        image: this.currentImage,\n        frameIndex: currFrameIndex,\n        currNormalizeMode: newMode,\n        useWindowCenter: newWindowCenter,\n        useWindowWidth: newWindowWidth,\n      });\n      if (ifShowSagittalCoronal) {\n        this.buildSagittalView(\n          this.currentSeries,\n          currentSagittalNo - 1,\n          newWindowCenter,\n          newWindowWidth,\n          newMode\n        );\n        this.buildCoronalView(\n          this.currentSeries,\n          currentCoronaNo - 1,\n          newWindowCenter,\n          newWindowWidth,\n          newMode\n        );\n      }\n    }\n  };\n\n  renderImage = (\n    buffer: any,\n    daikonImage?: any,\n    imageData?: any,\n    useWindowCenter?: number,\n    useWindowWidth?: number\n  ) => {\n    // console.log(\"renderImage bytelength:\", buffer.byteLength);\n    // daikon.Parser.verbose = true;\n    let image;\n    let numFrames;\n    if (!daikonImage) {\n      try {\n        image = daikon.Series.parseImage(new DataView(buffer));\n        if (isEqual(image.getImageDirections(), [1, 0, 0, 0, 1, 0])) {\n          this.setState({ isCommonAxialView: true });\n          // console.log(\"normal dicom:\");\n        } else {\n          console.log(\"not axial dicom:\", image.getAcquiredSliceDirection());\n        }\n      } catch (e) {\n        console.log(\"parse dicom error:\", e);\n      }\n    } else {\n      image = daikonImage;\n    }\n\n    numFrames = image.getNumberOfFrames();\n\n    if (numFrames > 1) {\n      // console.log(\"frames:\", numFrames);\n      const multiFrameInfo = `It's multi-frame file (n=${numFrames})`;\n\n      this.setState({\n        multiFrameInfo,\n      });\n    }\n    this.setState({\n      frameIndexes: Array.from(\n        {\n          length: numFrames,\n        },\n        (v, k) => ({\n          text: k,\n          value: k,\n        })\n      ),\n      currFrameIndex: 0,\n    });\n    this.currentImage = image;\n\n    this.renderFrame({\n      image: this.currentImage,\n      frameIndex: 0,\n      imageData,\n      useWindowCenter,\n      useWindowWidth,\n    });\n  };\n\n  renderFrame = (\n    arg: {\n      image?: any;\n      frameIndex?: number;\n      currNormalizeMode?: number;\n      useWindowWidth?: number;\n      useWindowCenter?: number;\n      canvasRef?: React.RefObject<HTMLCanvasElement>;\n      rawData?: number[];\n      rawDataWidth?: number;\n      rawDataHeight?: number;\n      extraHeightScale?: number;\n      extraWidthScale?: number;\n\n      imageData?: {\n        // only for axial view\n        max?: number;\n        min?: number;\n        numCols?: number;\n        numRows?: number;\n        data?: number[];\n      };\n    }\n    // ifWindowCenterMode?: boolean\n  ) => {\n    let {\n      image,\n      frameIndex,\n      currNormalizeMode,\n      useWindowWidth,\n      useWindowCenter,\n      canvasRef,\n      rawData,\n      rawDataWidth,\n      rawDataHeight,\n      extraHeightScale,\n      extraWidthScale,\n      imageData,\n    } = arg;\n    // console.log(`switch to ${frameIndex} Frame`);\n\n    let ifRGB = false;\n    let rgbMode = 0; // 0: rgbrgb... 1: rrrgggbbb\n    let windowWidth: number | null = null;\n    let windowCenter: number | null = null;\n    let storeMax;\n    let storeMin;\n\n    if (!canvasRef || canvasRef === this.myCanvasRef) {\n      // BUG:\n      // fetchFile (file://) case will need longer time to getPhotometricInterpretation after using a while\n      const photometric = image.getPhotometricInterpretation();\n      const modality = image.getModality();\n      if (photometric !== null) {\n        // const mode = image.getPlanarConfig();\n        // console.log(\"Planar mode:\", mode);\n        if (photometric.trim().indexOf(\"RGB\") !== -1) {\n          ifRGB = true;\n\n          rgbMode = image.getPlanarConfig() || 0;\n        } else if (photometric.trim().toLowerCase().indexOf(\"palette\") !== -1) {\n          ifRGB = true;\n        }\n      }\n\n      // getPhotometricInterpretation\n      // https://github.com/rii-mango/Daikon/issues/4\n      // The new function will handle things like byte order, number of bytes per voxel, datatype, data scales, etc.\n      // It returns an array of floating point values. So far this is only working for plain intensity data, not RGB.\n      let obj;\n      if (!imageData) {\n        try {\n          // BUG: latest daikon will throw a exception when calliing getInterpretedData for palette case\n          obj = image.getInterpretedData(false, true, frameIndex); // obj.data: float32array\n        } catch (e) {\n          console.log(\"read dicom InterpretedData error:\", e);\n          return;\n        }\n      } else {\n        obj = imageData;\n      }\n\n      storeMax = obj.max;\n      storeMin = obj.min;\n      rawData = obj.data as number[];\n      rawDataWidth = obj.numCols as number;\n      rawDataHeight = obj.numRows as number;\n      // center/width may be null\n      windowCenter = image.getWindowCenter() as number;\n      windowWidth = image.getWindowWidth() as number;\n      // console.log(\"max:\", typeof obj.max);\n      // console.log(\"windowCenter:\", typeof windowCenter);\n      this.setState({\n        windowCenter,\n        windowWidth,\n        pixelMax: obj.max,\n        pixelMin: obj.min,\n        resX: rawDataWidth,\n        resY: rawDataHeight,\n        modality,\n        photometric,\n      });\n    }\n\n    if (!rawDataWidth || !rawDataHeight) {\n      console.error(\"no width/height info. give up render \");\n      return;\n    }\n    if (!rawData) {\n      console.error(\"no rawData. give up render \");\n      return;\n    }\n\n    let max;\n    let min;\n    if (currNormalizeMode === undefined) {\n      ({ currNormalizeMode } = this.state);\n    }\n    if (useWindowWidth === undefined) {\n      ({ useWindowWidth } = this.state);\n    }\n    if (useWindowCenter === undefined) {\n      ({ useWindowCenter } = this.state);\n    }\n    // console.log(\"useWindowWidth:\", useWindowWidth);\n    ({ max, min } = this.getNormalizationRange(\n      useWindowWidth,\n      useWindowCenter,\n      currNormalizeMode,\n      windowWidth,\n      windowCenter,\n      storeMax ? storeMax : this.seriesGlobalMax,\n      storeMin ? storeMin : this.seriesGlobalMin\n    ));\n\n    if (!canvasRef) {\n      canvasRef = this.myCanvasRef;\n    }\n    if (!canvasRef.current) {\n      console.log(\"canvasRef is not ready, return\");\n      return;\n    }\n\n    // const c = this.myCanvasRef.current; // document.getElementById(\"myCanvas\");\n    const c = document.createElement(\"canvas\");\n    c.width = rawDataWidth;\n    c.height = rawDataHeight;\n    // Create context from canvas\n    const ctx = c.getContext(\"2d\");\n    // Create ImageData object\n    if (!ctx) {\n      return;\n    }\n    const imgData = ctx.createImageData(rawDataWidth, rawDataHeight);\n    const { data } = imgData; // .data; // width x height x 4 (RGBA), Uint8ClampedArray\n\n    if (!ifRGB) {\n      for (let i = 0, k = 0; i < data.byteLength; i += 4, k += 1) {\n        let value = rawData[k];\n\n        // Create array view\n        // const array = new Uint8ClampedArray(rawData.length);\n        // BUG: coranal/sagittal may have undefined so will not have normalization\n        if (max && min) {\n          const delta = max - min;\n          // for (let i = 0; i < rawData.length; i += 1) {\n          // truncate\n          if (min !== storeMin || max !== storeMax) {\n            if (value > max) {\n              value = max;\n            } else if (value < min) {\n              value = min;\n            }\n          }\n          // normalization\n          value = ((value - min) * 255) / delta;\n          // }\n        }\n\n        data[i] = value;\n        data[i + 1] = value;\n        data[i + 2] = value;\n        data[i + 3] = 255;\n      }\n    } else if (rgbMode === 0) {\n      // if 3 channels, pixel array'order is at Tag (0028, 0006)\n      // Planar Configuration = 0 -> R1, G1, B1, R2, G2, B2, …\n      // Planar Configuration = 1 -> R1, R2, R3, …, G1, G2, G3, …, B1, B2, B3\n      const array = rawData;\n      for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n        data[i] = array[k];\n        if ((i + 2) % 4 === 0) {\n          data[i + 1] = 255;\n          i += 1;\n        }\n      }\n    } else {\n      // Note: tested. https://barre.dev/medical/samples/US-RGB-8-epicard\n      const array = rawData;\n      const pixelCount = array.length / 3;\n      for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n        // data[i] = array[k];\n\n        const j = Math.floor(i / 4); // jth pixel, start from 0\n        if ((i + 1) % 4 === 1) {\n          // r\n          data[i] = array[j];\n        } else if ((i + 1) % 4 === 2) {\n          // g\n          data[i] = array[j + pixelCount];\n        } else if ((i + 1) % 4 === 3) {\n          // b\n          data[i] = array[j + pixelCount * 2];\n\n          data[i + 1] = 255;\n          i += 1;\n        }\n      }\n    }\n\n    // console.log(\"fill data to ctx's imagedata done, then draw our imagedata onto the canvas\")\n    ctx.putImageData(imgData, 0, 0);\n\n    let scale = 1;\n    if (!extraHeightScale || !extraWidthScale) {\n      scale = this.resizeTotFit(rawDataWidth, rawDataHeight);\n    }\n    //  else if (canvasRef === this.myCanvasRefSagittal) {\n    //   // sagittal view\n    //   scale = this.resizeTotFit(1, rawDataWidth);\n    // } else {\n    //   scale = this.resizeTotFit(rawDataWidth, rawDataHeight);\n    // }\n\n    if (scale !== 1) {\n      // console.log(\"scale:\", scale);\n    }\n    const c2: any = canvasRef.current;\n    c2.width = rawDataWidth / scale;\n    c2.height = rawDataHeight / scale;\n    if (extraHeightScale) {\n      c2.height = c2.height * extraHeightScale;\n    }\n    if (extraWidthScale) {\n      c2.width = c2.width * extraWidthScale;\n    }\n    const ctx2 = c2.getContext(\"2d\");\n    ctx2.drawImage(c, 0, 0, c2.width, c2.height);\n  };\n\n  async onOpenFileURLs(fileURLStr: string) {\n    const files = fileURLStr.split(\"file://\");\n    files.sort((a, b) => {\n      return a.localeCompare(b);\n    });\n    console.log(\"sorted files:\", files);\n    this.files = [];\n    files.forEach((file, index) => {\n      if (index !== 0) {\n        this.files.push(`file://${file}`);\n      }\n    });\n\n    const { ifShowSagittalCoronal } = this.state;\n    if (ifShowSagittalCoronal) {\n      await this.loadSeriesFilesToRender(this.files);\n    } else {\n      this.setState({\n        totalFiles: this.files.length,\n        currFileNo: 1,\n      });\n      this.fetchFile(this.files[0]);\n    }\n  }\n\n  fetchFile = async (url: string) => {\n    this.setState({\n      currFilePath: decodeURI(url),\n    });\n\n    if (!this.checkDicomNameAndResetState(url)) {\n      return;\n    }\n\n    const buffer = await fetchDicomAsync(url);\n    this.renderImage(buffer);\n  };\n\n  switchImage = (value: number) => {\n    this.setState({\n      currFileNo: value,\n    });\n\n    const { ifShowSagittalCoronal } = this.state;\n    // console.log(\"ifShowSagittalCoronal:\", ifShowSagittalCoronal);\n    if (ifShowSagittalCoronal) {\n      this.buildAxialView(\n        this.currentSeries,\n        this.currentSeriesImageObjects,\n        value - 1\n      );\n    } else {\n      const newFile = this.files[value - 1];\n      // console.log(\"switch to image:\", value, newFile);\n      if (!this.isOnlineMode) {\n        this.loadFile(newFile);\n      } else {\n        this.fetchFile(newFile);\n      }\n    }\n  };\n\n  switchSagittal = (value: number) => {\n    this.setState({\n      currentSagittalNo: value,\n    });\n\n    this.buildSagittalView(this.currentSeries, value - 1);\n  };\n\n  switchCorona = (value: number) => {\n    this.setState({\n      currentCoronaNo: value,\n    });\n\n    this.buildCoronalView(this.currentSeries, value - 1);\n  };\n\n  checkDicomNameAndResetState(name: string) {\n    const c2: any = this.myCanvasRef.current;\n    if (c2) {\n      // console.log(\"reset canvas\");\n      const ctx2 = c2.getContext(\"2d\");\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n    }\n    this.setState({\n      ...initialImageState,\n      isCommonAxialView: false,\n    });\n    const { ifShowSagittalCoronal } = this.state;\n    if (!ifShowSagittalCoronal) {\n      this.setState({\n        useWindowCenter: 0,\n        useWindowWidth: -1,\n      });\n    }\n    // \"file:///Users/grimmer/NCKUH_lung/.DS_Store\"\n    if (\n      name.toLowerCase().endsWith(\".dcm\") === false &&\n      name.toLowerCase().endsWith(\".dicom\") === false\n    ) {\n      console.log(\"not dicom file:\", name);\n\n      this.setState({\n        hasDICOMExtension: false,\n      });\n\n      return false;\n    }\n\n    return true;\n  }\n\n  /* eslint-disable */\n  async loadFile(file: any) {\n    this.setState({\n      currFilePath: file.name,\n    });\n\n    if (!this.checkDicomNameAndResetState(file.name)) {\n      return;\n    }\n\n    const buffer = await loadDicomAsync(file);\n    this.renderImage(buffer);\n  }\n\n  async loadSeriesFilesToRender(files: string[] | any[]) {\n    const promiseList: any[] = [];\n    let firstFile = \"\";\n    const fileList: any[] = [];\n    this.files.forEach((file, index) => {\n      // TODO: filter  invalid dicom, e.g. .DS file\n\n      if (typeof file === \"string\") {\n        if (\n          file.toLowerCase().endsWith(\".dcm\") === false &&\n          file.toLowerCase().endsWith(\".dicom\") === false\n        ) {\n          return;\n        }\n        fileList.push(file);\n        if (!firstFile) {\n          firstFile = decodeURI(file);\n          // ~ loadFile/fetchFile\n          this.setState({\n            currFilePath: firstFile,\n          });\n          if (!this.checkDicomNameAndResetState(file)) {\n          }\n        }\n        promiseList.push(fetchDicomAsync(file));\n      } else {\n        if (\n          file.name.toLowerCase().endsWith(\".dcm\") === false &&\n          file.name.toLowerCase().endsWith(\".dicom\") === false\n        ) {\n          return;\n        }\n        fileList.push(file);\n        if (!firstFile) {\n          firstFile = file.name;\n          this.setState({\n            currFilePath: file.name,\n          });\n          if (!this.checkDicomNameAndResetState(file.name)) {\n          }\n        }\n        promiseList.push(loadDicomAsync(file));\n      }\n    });\n    this.files = fileList;\n\n    const bufferList = await Promise.all(promiseList);\n    // console.log(\"bufferList:\", bufferList);\n    const series = new daikon.Series();\n\n    for (const buffer of bufferList) {\n      const image = daikon.Series.parseImage(new DataView(buffer as any));\n      // console.log(image.getSliceLocation());\n\n      // const orientationArray = image.getImageDirections(); //[1,0,0,0,1,0] Tag\t(0020,0037)\n      // const daikonOrientation = image.getOrientation(); //XYZ--+\n      // console.log(\n      //   \"orientationArray:\",\n      //   orientationArray,\n      //   \";daikonOrientation:\",\n      //   daikonOrientation\n      // );\n\n      if (image === null) {\n        console.error(daikon.Series.parserError);\n      } else if (image.hasPixelData()) {\n        // Anatomical Orientation Type Attribute\n        // https://dicom.innolitics.com/ciods/12-lead-ecg/general-series/00102210\n        // Patient Orientation:\n        // https://dicom.innolitics.com/ciods/cr-image/general-image/00200020\n\n        // axial DICOM looks like a mirror image !! if its 0020,0037 is 1,0,0,0,1.0\n        // https://stackoverflow.com/questions/34782409/understanding-dicom-image-attributes-to-get-axial-coronal-sagittal-cuts/34783893\n        // https://dicom.innolitics.com/ciods/ct-image/image-plane/00200037\n\n        // https://www.slicer.org/wiki/Coordinate_systems\n\n        if (series.images.length === 0) {\n          series.addImage(image);\n          if (isEqual(image.getImageDirections(), [1, 0, 0, 0, 1, 0])) {\n            this.setState({ isCommonAxialView: true });\n            // console.log(\"normal dicom:\");\n          } else {\n            console.log(\"not axial dicom:\", image.getAcquiredSliceDirection());\n          }\n        }\n\n        // if it's part of the same series, add it\n        else if (image.getSeriesId() === series.images[0].getSeriesId()) {\n          if (\n            image.getSliceThickness() === series.images[0].getSliceThickness()\n          ) {\n            series.addImage(image);\n          } else {\n            console.warn(\"not same slicethickness\");\n          }\n        } else {\n          console.warn(\"not same seriesID(defined by daikon)\");\n        }\n      }\n    }\n    // order the image files, determines number of frames, etc.\n\n    if (series.images.length > 0) {\n      series.buildSeries();\n      series.images.reverse(); //since buildSeries will sort by z increase\n      this.currentSeries = series;\n      this.currentSeriesImageObjects = [];\n      let useWindowCenter = series.images[0].getWindowCenter() as number;\n      let useWindowWidth = series.images[0].getWindowWidth() as number;\n      let globalMax = 0;\n      let globalMin = 0;\n      series.images.forEach((image: any) => {\n        // TODO: handle exception case\n        const obj = image.getInterpretedData(false, true, 0); // obj.data: float32array\n        let max = obj.max;\n        let min = obj.min;\n        this.currentSeriesImageObjects.push(obj);\n        // if (useWindowCenter === null) {\n        if (globalMax === undefined || max > globalMax) {\n          globalMax = max;\n        }\n        if (globalMin === undefined || min < globalMin) {\n          globalMin = min;\n        }\n        // }\n      });\n      this.seriesGlobalMax = globalMax;\n      this.seriesGlobalMin = globalMin;\n      if (useWindowWidth) {\n        this.setState({\n          useWindowCenter,\n          useWindowWidth,\n        });\n      } else {\n        this.setState({\n          useWindowCenter: Math.floor((globalMax + globalMin) / 2),\n          useWindowWidth: globalMax - globalMin,\n        });\n      }\n\n      const w = series.images[0].getCols();\n      const firstSagittal = Math.floor(w / 2);\n      this.setState({\n        totalSagittalFrames: w, //this.files.length,\n        currentSagittalNo: firstSagittal + 1,\n      });\n      // build SAGITTAL\n      this.buildSagittalView(\n        series,\n        firstSagittal,\n        useWindowCenter,\n        useWindowWidth\n      );\n      // build CORONAL views\n      const h = series.images[0].getRows();\n      const firstCoronal = Math.floor(h / 2);\n      this.setState({\n        totalCoronaFrames: h, //this.files.length,\n        currentCoronaNo: firstCoronal + 1,\n      });\n      this.buildCoronalView(\n        series,\n        firstCoronal,\n        useWindowCenter,\n        useWindowWidth\n      );\n\n      const firstImageNo = Math.floor(series.images.length / 2);\n      this.setState({\n        totalFiles: this.files.length,\n        currFileNo: firstImageNo + 1,\n      });\n      this.buildAxialView(\n        series,\n        this.currentSeriesImageObjects,\n        firstImageNo,\n        useWindowCenter,\n        useWindowWidth\n      );\n      // NOTE: not support multi-frame or not default axial view now\n      // for (const image of images) {\n      //   console.log(image.getSliceLocation());\n      // }\n    } else {\n      console.warn(\"no series image\");\n    }\n  }\n\n  buildAxialView(\n    series: any,\n    seriesObjects: any[],\n    i_image: number,\n    useWindowCenter?: number,\n    useWindowWidth?: number\n  ) {\n    const daikonImage = series.images[i_image];\n    const imageData = seriesObjects[i_image];\n    this.renderImage(\n      null,\n      daikonImage,\n      imageData,\n      useWindowCenter,\n      useWindowWidth\n    );\n  }\n\n  onDropFiles = async (acceptedFiles: any[]) => {\n    if (acceptedFiles.length > 0) {\n      acceptedFiles.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n      this.isOnlineMode = false;\n      this.files = acceptedFiles;\n      // this.setState({\n      //   totalFiles: this.files.length,\n      //   currFileNo: 1,\n      // });\n      const { ifShowSagittalCoronal } = this.state;\n\n      if (ifShowSagittalCoronal) {\n        await this.loadSeriesFilesToRender(this.files);\n      } else {\n        // console.log(\"ifShowSagittalCoronal = false\");\n        this.setState({\n          totalFiles: this.files.length,\n          currFileNo: 1,\n        });\n        this.loadFile(this.files[0]);\n      }\n    }\n  };\n\n  // toward left hand\n  buildSagittalView(\n    series: any,\n    j_sagittal: number,\n    useWindowCenter?: number,\n    useWindowWidth?: number,\n    currNormalizeMode?: number\n  ) {\n    const images = series.images;\n    // console.log(\"series images:\", images);\n    const w = images[0].getCols();\n    const h = images[0].getRows();\n    if (j_sagittal >= w) {\n      console.error(\"j_sagittal is >=w, invalid\");\n      return;\n    }\n    const n_slice = images.length;\n    // sggittal: h*n_slice, total: w. j-ith sgg view in w frames\n    // 0th row: series.images[0] - j-th column\n    const rawData: number[] = []; //new Array<number>(h * n_slice);\n    // iterate each slice\n    this.currentSeriesImageObjects.forEach((obj: any) => {\n      const data = obj.data as number[];\n      // j column, toward right hand\n      for (let i_row = 0; i_row < h; i_row++) {\n        rawData.push(data[j_sagittal + w * i_row]);\n      }\n    });\n    if (rawData.length !== h * n_slice) {\n      console.error(\"sagittal view's number of element is wrong\");\n      return;\n    }\n\n    const spacing = images[0].getPixelSpacing();\n    const spaceW = spacing[0];\n    const spaceH = spacing[1]; // shoudl equal to spaceW\n    const sliceThickness = images[0].getSliceThickness();\n\n    let scale = 1;\n    scale = this.resizeTotFit(w, h);\n\n    this.renderFrame({\n      canvasRef: this.myCanvasRefSagittal,\n      rawData,\n      rawDataWidth: h,\n      rawDataHeight: n_slice,\n      extraHeightScale: sliceThickness / spaceH / scale,\n      extraWidthScale: 1 / scale,\n      useWindowCenter,\n      useWindowWidth,\n      currNormalizeMode,\n    });\n  }\n\n  // toward posterior side of the patient.\n  buildCoronalView(\n    series: any,\n    k_corona: number,\n    useWindowCenter?: number,\n    useWindowWidth?: number,\n    currNormalizeMode?: number\n  ) {\n    const images = series.images;\n    // console.log(\"series images:\", images);\n    const w = images[0].getCols();\n    const h = images[0].getRows();\n    if (k_corona >= h) {\n      console.error(\"k_corona is >=h, invalid\");\n      return;\n    }\n    const n_slice = images.length;\n    // sggittal: w*n_slice, tota: h. k-th corona view in h frames\n    // 0th row: series.images[0] - 0th or final row\n    const rawData: number[] = []; //new Array<number>(h * n_slice);\n    // iterate each slice\n    this.currentSeriesImageObjects.forEach((obj: any) => {\n      // const obj = image.getInterpretedData(false, true, 0); // obj.data: float32array\n      const data = obj.data as number[];\n      // j column, toward right hand\n      for (let i_column = 0; i_column < w; i_column++) {\n        rawData.push(data[i_column + w * k_corona]);\n      }\n    });\n    if (rawData.length !== h * n_slice) {\n      console.error(\"coronal view's number of element is wrong\");\n      return;\n    }\n\n    const spacing = images[0].getPixelSpacing();\n    const spaceW = spacing[0];\n    const spaceH = spacing[1]; // shoudl equal to spaceW\n    const sliceThickness = images[0].getSliceThickness();\n\n    let scale = 1;\n    scale = this.resizeTotFit(w, h);\n\n    this.renderFrame({\n      canvasRef: this.myCanvasRefCorona,\n      rawData,\n      rawDataWidth: w,\n      rawDataHeight: n_slice,\n      extraHeightScale: sliceThickness / spaceW / scale,\n      extraWidthScale: 1 / scale,\n      useWindowCenter,\n      useWindowWidth,\n      currNormalizeMode,\n    });\n  }\n\n  handleSwitchFrame = (\n    e: React.SyntheticEvent<HTMLElement, Event>,\n    obj: DropdownProps\n  ) => {\n    const value = obj.value as number;\n\n    console.log(\"switch frame:\", value);\n\n    this.setState({\n      currFrameIndex: value,\n    });\n    this.renderFrame({ image: this.currentImage, frameIndex: value });\n  };\n\n  resizeTotFit(width: number, height: number) {\n    let scale = 1;\n    const size = {\n      maxWidth: this.maxWidth,\n      maxHeight: this.maxHeight,\n    };\n    if (width <= size.maxWidth && height <= size.maxHeight) {\n      return scale;\n    }\n    const scaleW = width / size.maxWidth;\n    const scaleH = height / size.maxHeight;\n    scale = scaleW >= scaleH ? scaleW : scaleH;\n\n    return scale;\n  }\n\n  onKeyDown = (keyName: string) => {\n    const { totalFiles, currFileNo } = this.state;\n    let newFileNo = currFileNo;\n    if (totalFiles > 1) {\n      if (keyName === \"right\") {\n        newFileNo += 1;\n        if (newFileNo > totalFiles) {\n          return;\n        }\n      } else if (keyName === \"left\") {\n        newFileNo -= 1;\n        if (newFileNo < 1) {\n          return;\n        }\n      }\n    } else {\n      return;\n    }\n\n    this.switchImage(newFileNo);\n  };\n\n  onMouseCanvasDown = (event: any) => {\n    console.log(\"onMouseDown:\", event);\n    this.setState({\n      isValidMouseDown: true,\n    });\n\n    this.clientX = event.clientX;\n    this.clientY = event.clientY;\n\n    // register mouse move event\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n  };\n\n  onMouseUp = (event: any) => {\n    // console.log(\"onMouseUp:\", event);\n    this.setState({\n      isValidMouseDown: false,\n    });\n\n    // unregister mouse move event\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n  };\n\n  // TODO: add throttle-debounce\n  onMouseMove = (event: any) => {\n    // console.log(\"onMousemove:\", event);\n    // const { clientX, scrollLeft, scrollTop, clientY } = this.state;\n    // this._scroller.scrollLeft = scrollLeft - clientX + event.clientX;\n    // this._scroller.scrollTop = scrollTop - clientY + event.clientY;\n    const {\n      isValidMouseDown,\n      windowCenter,\n      windowWidth,\n      pixelMax,\n      pixelMin,\n      useWindowWidth,\n      useWindowCenter,\n      currFrameIndex,\n      currNormalizeMode,\n      ifShowSagittalCoronal,\n      currentCoronaNo,\n      currentSagittalNo,\n    } = this.state;\n    if (isValidMouseDown) {\n      const {\n        max,\n        min,\n        tmpWindowCenter,\n        tmpWindowWidth,\n      } = this.getNormalizationRange(\n        useWindowWidth,\n        useWindowCenter,\n        currNormalizeMode,\n        windowWidth,\n        windowCenter,\n        pixelMax,\n        pixelMin\n      );\n\n      if (tmpWindowCenter !== undefined && tmpWindowWidth !== undefined) {\n        let deltaX = event.clientX - this.clientX;\n        const deltaY = this.clientY - event.clientY;\n        // console.log(\"deltaY:\", deltaY);\n\n        let newWindowWidth = tmpWindowWidth + deltaX;\n        if (newWindowWidth <= 1) {\n          // console.log(\"newWindowWidth minus:\", newWindowWidth);\n          newWindowWidth = 2;\n          deltaX = newWindowWidth - tmpWindowWidth;\n        }\n        if (deltaX === 0 && deltaY === 0) {\n          return;\n        }\n        // console.log(\"newWindowWidth:\", newWindowWidth);\n        const newWindowCenter = tmpWindowCenter + deltaY;\n        this.setState({\n          useWindowCenter: newWindowCenter,\n          useWindowWidth: newWindowWidth,\n        });\n        this.renderFrame({\n          image: this.currentImage,\n          frameIndex: currFrameIndex,\n          currNormalizeMode: currNormalizeMode,\n          useWindowCenter: newWindowCenter,\n          useWindowWidth: newWindowWidth,\n        });\n        if (ifShowSagittalCoronal) {\n          this.buildSagittalView(\n            this.currentSeries,\n            currentSagittalNo - 1,\n            newWindowCenter,\n            newWindowWidth\n          );\n          this.buildCoronalView(\n            this.currentSeries,\n            currentCoronaNo - 1,\n            newWindowCenter,\n            newWindowWidth\n          );\n        }\n      }\n\n      // max/min mode\n      // default window center mode\n    }\n    this.clientX = event.clientX;\n    this.clientY = event.clientY;\n  };\n\n  getNormalizationRange(\n    useWindowWidth: number,\n    useWindowCenter: number,\n    currNormalizeMode: number,\n    windowWidth: number | null,\n    windowCenter: number | null,\n    pixelMax: number,\n    pixelMin: number\n  ) {\n    let max;\n    let min;\n    let tmpWindowCenter;\n    let tmpWindowWidth;\n    // console.log(\n    //   \"a:\",\n    //   useWindowWidth, // -1\n    //   useWindowCenter, // 0\n    //   windowWidth, // null\n    //   windowCenter // null\n    // );\n    if (useWindowWidth >= 0 && useWindowCenter !== undefined) {\n      tmpWindowCenter = useWindowCenter;\n      tmpWindowWidth = useWindowWidth;\n    } else if (currNormalizeMode === NormalizationMode.WindowCenter) {\n      if (windowWidth !== null && windowWidth >= 0 && windowCenter !== null) {\n        tmpWindowCenter = windowCenter;\n        tmpWindowWidth = windowWidth;\n      }\n    } else if (currNormalizeMode === NormalizationMode.PixelHUMaxMin) {\n    } else {\n      const data = WindowCenterWidthConst[currNormalizeMode];\n      tmpWindowCenter = data.L;\n      tmpWindowWidth = data.W;\n    }\n    if (tmpWindowWidth !== undefined && tmpWindowCenter !== undefined) {\n      min = tmpWindowCenter - Math.floor(tmpWindowWidth / 2);\n      max = tmpWindowCenter + Math.floor(tmpWindowWidth / 2);\n    } else {\n      // max/min\n      max = pixelMax;\n      min = pixelMin;\n      // ({ max, min } = obj);\n    }\n\n    // console.log(\"t:\", max, min, pixelMax, pixelMin);\n\n    return {\n      max,\n      min,\n      tmpWindowCenter,\n      tmpWindowWidth,\n    };\n  }\n\n  handleSeriesModeChange = async (e: any, obj: any) => {\n    // e: React.SyntheticEvent<HTMLElement, Event>,\n    // obj: DropdownProps\n    const { value } = obj;\n    // console.log(\"mode:\", value);\n    const { seriesMode } = this.state;\n    if (seriesMode === \"seriesMode\") {\n      this.setState({\n        seriesMode: \"notSeriesMode\",\n        ifShowSagittalCoronal: false,\n      });\n      this.maxWidth = MAX_WIDTH_SINGLE_MODE;\n      this.maxHeight = MAX_HEIGHT_SINGLE_MODE;\n      if (this.files.length > 0) {\n        console.log(\"ifShowSagittalCoronal = false\");\n        this.setState({\n          totalFiles: this.files.length,\n          currFileNo: 1,\n        });\n        if (this.isOnlineMode) {\n          this.fetchFile(this.files[0]);\n        } else {\n          this.loadFile(this.files[0]);\n        }\n      }\n    } else if (seriesMode === \"notSeriesMode\") {\n      this.maxWidth = MAX_WIDTH_SERIES_MODE;\n      this.maxHeight = MAX_HEIGHT_SERIES_MODE;\n      this.setState({ seriesMode: \"seriesMode\", ifShowSagittalCoronal: true });\n      if (this.files.length > 0) {\n        await this.loadSeriesFilesToRender(this.files);\n      }\n    }\n  };\n\n  render() {\n    const {\n      currFilePath,\n      multiFrameInfo,\n      frameIndexes,\n      currFrameIndex,\n      ifWindowCenterMode,\n      currNormalizeMode,\n      windowCenter,\n      windowWidth,\n      pixelMax,\n      pixelMin,\n      resX,\n      resY,\n      photometric,\n      modality,\n      currFileNo,\n      totalFiles,\n      hasDICOMExtension,\n      useWindowWidth,\n      useWindowCenter,\n      ifShowSagittalCoronal,\n      currentSagittalNo,\n      totalSagittalFrames,\n      currentCoronaNo,\n      totalCoronaFrames,\n      seriesMode,\n      isCommonAxialView,\n    } = this.state;\n    let info = \"[meta]\";\n    info += ` modality:${modality};photometric:${photometric}`;\n    if (resX && resY) {\n      info += ` resolution:${resX}x${resY}`;\n    }\n    if (multiFrameInfo) {\n      info += `; ${multiFrameInfo}`;\n    }\n\n    const {\n      max,\n      min,\n      tmpWindowCenter,\n      tmpWindowWidth,\n    } = this.getNormalizationRange(\n      useWindowWidth,\n      useWindowCenter,\n      currNormalizeMode,\n      windowWidth,\n      windowCenter,\n      pixelMax,\n      pixelMin\n    );\n\n    return (\n      <Hotkeys\n        allowRepeat\n        keyName=\"right,left\"\n        onKeyDown={this.onKeyDown}\n        // onKeyUp={this.onKeyUp.bind(this)}\n      >\n        <div className=\"flex-container\">\n          <div>\n            <div className=\"flex-container\">\n              <div>\n                DICOM Image Viewer (feat: 1. click DICOM url 2. click extension\n                icon (or ctrl+u/cmd+u) to open <br></br>viewer page 3. drag any\n                DICOM file into Chrome without opening viewer first 4.\n                <a href=\"https://github.com/grimmer0125/dicom-web-viewer/wiki\">\n                  {\" \"}\n                  More (e.g. CLI and Instruction)!\n                </a>\n              </div>\n            </div>\n            <div>\n              <div className=\"flex-container\">\n                <Dropzone\n                  preventDropOnDocument={false}\n                  style={dropZoneStyle}\n                  getDataTransferItems={(evt) => fromEvent(evt)}\n                  onDrop={this.onDropFiles}\n                >\n                  <div\n                    style={{\n                      height: \"100%\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div>\n                      <p>\n                        {\" \"}\n                        Try dropping DICOM image files/folder here, <br />\n                        or click here to select files to view. <br />\n                        You need to enable file url access in extenstion DETAILS\n                        setting page. <br /> Use right/left key to switch &\n                        mouse press+move to change window center (level) <br />\n                        and widow width\n                      </p>\n                    </div>\n                  </div>\n                </Dropzone>\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {info}\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div>\n                  <div className=\"flex-container\">\n                    {`pixel/HU max:${pixelMax}, min:${pixelMin}; useWindowCenter:${\n                      tmpWindowCenter ?? \"\"\n                    }, useWindowWidth:${\n                      tmpWindowWidth ?? \"\"\n                    }; Normalization mode:`}\n                    <br></br>\n                    {`(WindowCenter mode will fallback to Pixel/HU MaxMin if no value):`}\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.WindowCenter}\n                      windowItem={\n                        windowWidth >= 0\n                          ? { L: windowCenter, W: windowWidth }\n                          : undefined\n                      }\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                    <NormalizationComponent\n                      mode={NormalizationMode.PixelHUMaxMin}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.AbdomenSoftTissues}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n\n                    <NormalizationComponent\n                      mode={NormalizationMode.SpineSoftTissues}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n\n                    <NormalizationComponent\n                      mode={NormalizationMode.SpineBone}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.Brain}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                    <NormalizationComponent\n                      mode={NormalizationMode.Lungs}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                    <Radio\n                      toggle\n                      value={\"seriesMode\"}\n                      checked={seriesMode === \"seriesMode\"}\n                      onChange={this.handleSeriesModeChange}\n                    />\n                    {\"  Enable Series mode\"}\n                  </div>\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <div>\n                    {\" \"}\n                    {frameIndexes.length > 1 ? (\n                      <Dropdown\n                        placeholder=\"Switch Frame\"\n                        selection\n                        onChange={this.handleSwitchFrame}\n                        options={frameIndexes}\n                        value={currFrameIndex}\n                      />\n                    ) : null}{\" \"}\n                  </div>{\" \"}\n                </div>{\" \"}\n              </div>\n            </div>\n            {/* <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              {\" \"}\n              {currFilePath || null}{\" \"}\n            </div> */}\n            {totalFiles > 0 ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div style={{ width: 600 }}>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    {`${currFilePath}. ${currFileNo}/${totalFiles}`}\n                  </div>\n                  <div className=\"flex-container\">\n                    {isCommonAxialView ? <div>{\"S\"}</div> : null}\n                    <Slider\n                      value={currFileNo}\n                      step={1}\n                      min={1}\n                      max={totalFiles}\n                      onChange={this.switchImage}\n                    />\n                    {isCommonAxialView ? <div>{\"I\"}</div> : null}{\" \"}\n                  </div>\n                  {ifShowSagittalCoronal ? (\n                    <>\n                      <div className=\"flex-container\">\n                        {isCommonAxialView ? <div>{\"R\"}</div> : null}{\" \"}\n                        <Slider\n                          value={currentSagittalNo}\n                          step={1}\n                          min={1}\n                          max={totalSagittalFrames}\n                          onChange={this.switchSagittal}\n                        />\n                        {isCommonAxialView ? <div>{\"L\"}</div> : null}{\" \"}\n                      </div>\n                      <div className=\"flex-container\">\n                        {isCommonAxialView ? <div>{\"A\"}</div> : null}{\" \"}\n                        <Slider\n                          value={currentCoronaNo}\n                          step={1}\n                          min={1}\n                          max={totalCoronaFrames}\n                          onChange={this.switchCorona}\n                        />\n                        {isCommonAxialView ? <div>{\"P\"}</div> : null}{\" \"}\n                      </div>\n                    </>\n                  ) : null}\n                </div>\n              </div>\n            ) : null}\n            {hasDICOMExtension ? (\n              <div\n                // onMouseDown={this.onMouseDown0}\n                // onScroll={this.onMouseMove0}\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"center\",\n                    alignItems: \"center\",\n                  }}\n                >\n                  {isCommonAxialView ? <div>{\"A\"}</div> : null}{\" \"}\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    {isCommonAxialView ? <div>{\"R\"}</div> : null}{\" \"}\n                    <canvas\n                      onMouseDown={this.onMouseCanvasDown}\n                      // onMouseUp={this.onMouseUp0}\n                      // onScroll={this.onMouseMove}\n                      ref={this.myCanvasRef}\n                      width={MAX_WIDTH_SERIES_MODE}\n                      height={MAX_HEIGHT_SERIES_MODE}\n                      style={{ backgroundColor: \"black\" }}\n                    />\n                    {isCommonAxialView ? <div>{\"L\"}</div> : null}{\" \"}\n                  </div>\n                  {isCommonAxialView ? <div>{\"P\"}</div> : null}{\" \"}\n                </div>\n\n                {ifShowSagittalCoronal ? (\n                  <>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      {isCommonAxialView ? <div>{\"S\"}</div> : null}{\" \"}\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {isCommonAxialView ? <div>{\"A\"}</div> : null}{\" \"}\n                        <canvas\n                          onMouseDown={this.onMouseCanvasDown}\n                          // onMouseUp={this.onMouseUp0}\n                          // onScroll={this.onMouseMove}\n                          ref={this.myCanvasRefSagittal}\n                          width={MAX_WIDTH_SERIES_MODE}\n                          height={MAX_HEIGHT_SERIES_MODE}\n                          style={{ backgroundColor: \"yellow\" }}\n                        />\n                        {isCommonAxialView ? <div>{\"P\"}</div> : null}{\" \"}\n                      </div>\n                      {isCommonAxialView ? <div>{\"I\"}</div> : null}{\" \"}\n                    </div>\n                    <div\n                      style={{\n                        display: \"flex\",\n                        flexDirection: \"column\",\n                        justifyContent: \"center\",\n                        alignItems: \"center\",\n                      }}\n                    >\n                      {isCommonAxialView ? <div>{\"S\"}</div> : null}{\" \"}\n                      <div\n                        style={{\n                          display: \"flex\",\n                          justifyContent: \"center\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        {isCommonAxialView ? <div>{\"R\"}</div> : null}{\" \"}\n                        <canvas\n                          onMouseDown={this.onMouseCanvasDown}\n                          // onMouseUp={this.onMouseUp0}\n                          // onScroll={this.onMouseMove}\n                          ref={this.myCanvasRefCorona}\n                          width={MAX_WIDTH_SERIES_MODE}\n                          height={MAX_HEIGHT_SERIES_MODE}\n                          style={{ backgroundColor: \"green\" }}\n                        />\n                        {isCommonAxialView ? <div>{\"L\"}</div> : null}{\" \"}\n                      </div>\n                      {isCommonAxialView ? <div>{\"I\"}</div> : null}{\" \"}\n                    </div>\n                  </>\n                ) : null}\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </Hotkeys>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}