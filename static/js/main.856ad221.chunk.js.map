{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["NormalizationMode","fromEvent","require","WindowCenterWidthConst","AbdomenSoftTissues","W","L","SpineSoftTissues","SpineBone","Brain","Lungs","dropZoneStyle","borderWidth","borderColor","borderStyle","borderRadius","width","height","initialImageState","frameIndexes","currFrameIndex","multiFrameInfo","windowCenter","windowWidth","useWindowCenter","useWindowWidth","pixelMax","pixelMin","resX","resY","photometric","modality","hasDICOMExtension","isValidMouseDown","NormalizationComponent","props","mode","windowItem","currNormalizeMode","onChange","data","Checkbox","radio","label","name","value","checked","App","myCanvasRef","files","isOnlineMode","currentImage","clientX","clientY","handleNormalizeModeChange","e","newMode","setState","state","renderFrame","renderImage","buffer","console","log","byteLength","image","numFrames","daikon","parseImage","DataView","getNumberOfFrames","Array","from","length","v","k","text","frameIndex","obj","ifRGB","rgbMode","getPhotometricInterpretation","getModality","trim","indexOf","getPlanarConfig","toLowerCase","getInterpretedData","max","min","numCols","numRows","getWindowCenter","getWindowWidth","undefined","getNormalizationRange","i","current","c","document","createElement","ctx","getContext","imgData","createImageData","array","pixelCount","j","Math","floor","delta","Uint8ClampedArray","putImageData","scale","resizeTotFit","c2","drawImage","fetchFile","url","currFilePath","decodeURI","checkDicomNameAndResetState","xhr","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","send","request","overrideMimeType","view","a_byte","responseText","ArrayBuffer","split","forEach","charCodeAt","setUint8","buffer2","switchImage","currFileNo","newFile","loadFile","onDropFile","acceptedFiles","sort","a","b","localeCompare","totalFiles","handleSwitchFrame","onKeyDown","keyName","newFileNo","onMouseCanvasDown","event","window","addEventListener","onMouseMove","onMouseUp","removeEventListener","tmpWindowCenter","tmpWindowWidth","deltaX","deltaY","newWindowWidth","newWindowCenter","WindowCenter","ifWindowCenterMode","React","createRef","this","location","href","firstHash","fileURLs","substring","onOpenFileURLs","fileURLStr","file","index","push","clearRect","endsWith","reader","FileReader","fileContent","result","onabort","onerror","readAsArrayBuffer","size","scaleW","scaleH","PixelHUMaxMin","info","allowRepeat","className","preventDropOnDocument","style","getDataTransferItems","evt","onDrop","display","flexDirection","justifyContent","alignItems","Dropdown","placeholder","selection","options","step","onMouseDown","ref","Component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.856ad221.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Slider from \"rc-slider\";\nimport \"rc-slider/assets/index.css\";\n\nimport {\n  Dropdown,\n  Checkbox,\n  CheckboxProps,\n  DropdownProps,\n} from \"semantic-ui-react\";\n\nimport Dropzone from \"react-dropzone\";\nimport Hotkeys from \"react-hot-keys\";\nimport * as daikon from \"daikon\";\n\nconst { fromEvent } = require(\"file-selector\");\n\nenum NormalizationMode {\n  PixelHUMaxMin,\n  // below are for CT,\n  WindowCenter,\n  // https://radiopaedia.org/articles/windowing-ct\n  AbdomenSoftTissues, //W:400 L:50\n  SpineSoftTissues, // W:250 L:50\n  SpineBone, // W:1800 L:400\n  Brain, // W:80 L:40\n  Lungs, // W:1500 L:-600. chest\n  // AbdomenLiver, // W:150 L:30.\n  // Mediastinum, // W:350 L:50.\n  // head and neck series:\n  // Stroke W:8 L:32 or W:40 L:40 中風 head\n  // subdural W:130-300 L:50-100 腦硬膜\n  // temporal bones W:2800 L:600 顳骨\n  // soft tissues: W:350–400 L:20–60. head\n  // CTA (CT angiography) // https://www.stepwards.com/?page_id=21646 (W:600, L:170)\n}\n\ninterface WindowItem {\n  W: number;\n  L: number;\n}\n\ninterface IWindowDictionary {\n  [id: number]: WindowItem;\n}\n\nconst WindowCenterWidthConst: IWindowDictionary = {\n  [NormalizationMode.AbdomenSoftTissues]: {\n    W: 400,\n    L: 50,\n  },\n  [NormalizationMode.SpineSoftTissues]: {\n    W: 250,\n    L: 50,\n  },\n  [NormalizationMode.SpineBone]: {\n    W: 1800,\n    L: 400,\n  },\n  [NormalizationMode.Brain]: {\n    W: 80,\n    L: 40,\n  },\n  [NormalizationMode.Lungs]: {\n    W: 1500,\n    L: -600,\n  },\n};\n\nconst dropZoneStyle = {\n  borderWidth: 2,\n  borderColor: \"#666\",\n  borderStyle: \"dashed\",\n  borderRadius: 5,\n  width: 800,\n  height: 150,\n  // textAlign: \"center\",\n};\n\nconst initialImageState = {\n  frameIndexes: [],\n  currFrameIndex: 0,\n  multiFrameInfo: \"\",\n  windowCenter: 0,\n  windowWidth: -1,\n  useWindowCenter: 0,\n  useWindowWidth: -1,\n  pixelMax: 0,\n  pixelMin: 0,\n  resX: 0,\n  resY: 0,\n  photometric: \"\",\n  modality: \"\",\n  hasDICOMExtension: true,\n  isValidMouseDown: false, // reset when switching to a new image\n};\n\ntype State = {\n  currNormalizeMode: number;\n  ifWindowCenterMode: boolean;\n  currFilePath: string;\n  currFileNo: number;\n  totalFiles: number;\n  frameIndexes: any[];\n  currFrameIndex: number;\n  multiFrameInfo: string;\n  windowCenter: number;\n  windowWidth: number;\n  pixelMax: number; // pixel max\n  pixelMin: number; // pixel min\n  resX: number;\n  resY: number;\n  photometric: string;\n  modality: string;\n  hasDICOMExtension: boolean;\n  isValidMouseDown: boolean; // switch to another image, becomes invalid\n  useWindowCenter: number;\n  useWindowWidth: number;\n};\n\ninterface NormalizationProps {\n  mode: NormalizationMode;\n  windowItem?: WindowItem;\n  currNormalizeMode: NormalizationMode;\n  onChange?: (\n    e: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps\n  ) => void;\n}\n\nfunction NormalizationComponent(props: NormalizationProps) {\n  const { mode, windowItem, currNormalizeMode, onChange } = props;\n  const data = windowItem ?? WindowCenterWidthConst[mode] ?? null;\n  return (\n    <>\n      <Checkbox\n        radio\n        label={NormalizationMode[mode]}\n        name=\"checkboxRadioGroup\"\n        value={mode}\n        checked={currNormalizeMode === mode}\n        onChange={onChange}\n        // checked={ifWindowCenterMode}\n        // onChange={this.handleNormalizeModeChange}\n      />\n      {data ? ` c:${data.L}, w:${data.W}  ` : `  `}\n    </>\n  );\n}\n\nclass App extends Component<{}, State> {\n  myCanvasRef: React.RefObject<HTMLCanvasElement>;\n  files: any[];\n  isOnlineMode = true;\n  currentImage: any;\n  clientX: number;\n  clientY: number;\n\n  constructor() {\n    super({});\n    this.state = {\n      currNormalizeMode: NormalizationMode.WindowCenter,\n      ifWindowCenterMode: true,\n      currFilePath: \"\",\n      // multiFrameInfo: '',\n      // currFrameIndex: 0,\n      // frameIndexes: [],\n      // windowCenter: '',\n      // windowWidth: '',\n      // max: '',\n      // min: '',\n      // resX: '',\n      // resY: '',\n      // photometric: '',\n      // modality: '',\n      currFileNo: 0,\n      totalFiles: 0,\n      ...initialImageState,\n    };\n    this.myCanvasRef = React.createRef();\n    this.files = [];\n    this.clientX = 0;\n    this.clientY = 0;\n  }\n\n  componentDidMount() {\n    window.addEventListener(\"mouseup\", this.onMouseUp);\n    // window.addEventListener(\"mouseup\", this.onMouseUp);\n\n    // get file path from current url, e.g.\n    // chrome-extension://jfnlfimghfiagibfigmlopnfljpfnnje/dicom.html#file:///tmp/test.dcm\n    const url = window.location.href;\n    // 'http://localhost#http://medistim.com/wp-content/uploads/2016/07/ttfm.dcm'; //\n    // console.log(\"current url:\", url);\n\n    if (\n      url.toLowerCase().indexOf(\".dcm\") !== -1 ||\n      url.toLowerCase().indexOf(\".dicom\") !== -1\n    ) {\n      // const paths = url.split(\"#\");\n      const firstHash = url.indexOf(\"#\");\n      if (firstHash > -1) {\n        const fileURLs = url.substring(firstHash + 1, url.length);\n        // const filePath = paths[1];\n        // this.fetchFile(filePath);\n\n        this.onOpenFileURLs(fileURLs);\n      }\n    }\n  }\n\n  // TODO:\n  // mode\n  //  max/min mode\n  //  default window center mode\n  //  其他幾種 mode by michael\n  //  [pending] reset button\n  // show 現在的 normailze 值\n  // 滑鼠滾輪左鍵 or touch pad 壓著左鍵 都先加 +=1 or -=10 好了\n  // 切到新的 image, mode 保持好了, useWindowWidth 會 reset,\n  // 切同一張圖不同的 frame 呢? mode 保持, useWindowWidth呢????? 保持好了\n  // 切不同的 mode 呢? (就不能用客制化的 useWindowWidth, 要 reset )\n\n  handleNormalizeModeChange = (\n    e: React.FormEvent<HTMLInputElement>,\n    data: CheckboxProps\n  ) => {\n    const { value } = data;\n\n    // console.log(\"value:\", typeof value, value);\n    // let ifWindowCenterMode;\n    // if (value === \"center\") {\n    //   ifWindowCenterMode = true;\n    // } else {\n    //   ifWindowCenterMode = false;\n    // }\n    const newMode = value as number;\n    this.setState({\n      useWindowWidth: -1,\n      useWindowCenter: 0,\n      currNormalizeMode: newMode,\n    });\n\n    // this.setState({ ifWindowCenterMode });\n\n    if (this.currentImage) {\n      const { currFrameIndex } = this.state;\n      this.renderFrame(this.currentImage, currFrameIndex, newMode, -1);\n    }\n  };\n\n  renderImage = (buffer: any) => {\n    console.log(\"renderImage bytelength:\", buffer.byteLength);\n    if (buffer) {\n      // daikon.Parser.verbose = true;\n      let image;\n      let numFrames;\n      try {\n        image = daikon.Series.parseImage(new DataView(buffer));\n        numFrames = image.getNumberOfFrames();\n      } catch (e) {\n        console.log(\"parse dicom error:\", e);\n      }\n      if (numFrames > 1) {\n        // console.log(\"frames:\", numFrames);\n        const multiFrameInfo = `It's multi-frame file (n=${numFrames})`;\n\n        this.setState({\n          multiFrameInfo,\n        });\n      } else {\n        this.setState({\n          multiFrameInfo: \"\",\n        });\n      }\n      this.setState({\n        frameIndexes: Array.from(\n          {\n            length: numFrames,\n          },\n          (v, k) => ({\n            text: k,\n            value: k,\n          })\n        ),\n        currFrameIndex: 0,\n      });\n      this.currentImage = image;\n      this.renderFrame(this.currentImage, 0);\n    }\n  };\n\n  renderFrame = (\n    image: any,\n    frameIndex: number,\n    currNormalizeMode?: number,\n    useWindowWidth?: number,\n    useWindowCenter?: number\n    // ifWindowCenterMode?: boolean\n  ) => {\n    console.log(`switch to ${frameIndex} Frame`);\n\n    let ifRGB = false;\n    let rgbMode = 0; // 0: rgbrgb... 1: rrrgggbbb\n    // BUG:\n    // fetchFile (file://) case will need longer time to getPhotometricInterpretation after using a while\n    const photometric = image.getPhotometricInterpretation();\n    const modality = image.getModality();\n    if (photometric !== null) {\n      // const mode = image.getPlanarConfig();\n      // console.log(\"Planar mode:\", mode);\n      if (photometric.trim().indexOf(\"RGB\") !== -1) {\n        ifRGB = true;\n\n        rgbMode = image.getPlanarConfig() || 0;\n      } else if (photometric.trim().toLowerCase().indexOf(\"palette\") !== -1) {\n        ifRGB = true;\n      }\n    }\n\n    // getPhotometricInterpretation\n    // https://github.com/rii-mango/Daikon/issues/4\n    // The new function will handle things like byte order, number of bytes per voxel, datatype, data scales, etc.\n    // It returns an array of floating point values. So far this is only working for plain intensity data, not RGB.\n    let obj;\n    try {\n      // BUG: latest daikon will throw a exception when calliing getInterpretedData for palette case\n      obj = image.getInterpretedData(false, true, frameIndex); // obj.data: float32array\n    } catch (e) {\n      console.log(\"read dicom InterpretedData error:\", e);\n      return;\n    }\n    const width: number = obj.numCols;\n    const height: number = obj.numRows;\n    // center/width may be null\n    const windowCenter = image.getWindowCenter() as number;\n    const windowWidth = image.getWindowWidth() as number;\n    // console.log(\"max:\", typeof obj.max);\n    // console.log(\"windowCenter:\", typeof windowCenter);\n    this.setState({\n      windowCenter,\n      windowWidth,\n      pixelMax: obj.max,\n      pixelMin: obj.min,\n      resX: width,\n      resY: height,\n      modality,\n      photometric,\n    });\n\n    let max;\n    let min;\n    if (currNormalizeMode === undefined) {\n      ({ currNormalizeMode } = this.state);\n    }\n    if (useWindowWidth === undefined) {\n      ({ useWindowWidth } = this.state);\n    }\n    if (useWindowCenter === undefined) {\n      ({ useWindowCenter } = this.state);\n    }\n\n    // let tmpWindowCenter;\n    // let tmpeWindowWidth;\n    // if (useWindowWidth > 0) {\n    //   tmpWindowCenter = useWindowCenter;\n    //   tmpeWindowWidth = useWindowWidth;\n    // } else if (currNormalizeMode === NormalizationMode.WindowCenter) {\n    //   if (windowCenter && windowWidth) {\n    //     tmpWindowCenter = windowCenter;\n    //     tmpeWindowWidth = windowWidth;\n    //   }\n    // } else if (currNormalizeMode === NormalizationMode.MaxMin) {\n    // } else {\n    //   const data = WindowCenterWidthConst[currNormalizeMode];\n    //   tmpWindowCenter = data.L;\n    //   tmpeWindowWidth = data.W;\n    // }\n    // if (tmpeWindowWidth && tmpWindowCenter) {\n    //   min = tmpWindowCenter - Math.floor(tmpeWindowWidth / 2);\n    //   max = tmpWindowCenter + Math.floor(tmpeWindowWidth / 2);\n    // } else {\n    //   // max/min\n    //   ({ max, min } = obj);\n    // }\n    ({ max, min } = this.getNormalizationRange(\n      useWindowWidth,\n      useWindowCenter,\n      currNormalizeMode,\n      windowWidth,\n      windowCenter,\n      obj.max,\n      obj.min\n    ));\n\n    // truncate\n    if (min !== obj.min || max !== obj.max) {\n      for (let i = 0; i < obj.data.length; i += 1) {\n        if (obj.data[i] > max) {\n          obj.data[i] = max;\n        } else if (obj.data[i] < min) {\n          obj.data[i] = min;\n        }\n      }\n    }\n\n    // if (!ifWindowCenterMode) {\n    //   // MaxMin mode\n    //   console.log(\"mode1\");\n    //   ({ max, min } = obj);\n    // } else if (windowCenter && windowWidth) {\n    //   console.log(\"mode2\");\n\n    //   min = windowCenter - Math.floor(windowWidth / 2);\n    //   max = windowCenter + Math.floor(windowWidth / 2);\n\n    //   // truncate\n    //   for (let i = 0; i < obj.data.length; i += 1) {\n    //     if (obj.data[i] > max) {\n    //       obj.data[i] = max;\n    //     } else if (obj.data[i] < min) {\n    //       obj.data[i] = min;\n    //     }\n    //   }\n    // } else {\n    //   console.log(\"no valid window center/width\");\n    //   ({ max, min } = obj);\n    // }\n\n    // little endian type of dicom data seems to be unit16, http://rii.uthscsa.edu/mango/papaya/ shows 2 byte\n    // obj.data: float32, length:262144 (if dicom image is 512x512)\n    // NOTE: 32bit -> 8 bit (use min/max to normalize to 0~255 from -1000~1000）\n    // let max = null;\n    // let min = null;\n    // for (let i = 0; i < obj.data.length; i += 1) {\n    //   const pixel = obj.data[i];\n    //   if (!max || pixel > max) {\n    //     max = pixel;\n    //   }\n    // }\n    // for (let i = 0; i < obj.data.length; i += 1) {\n    //   // Set outside-of-scan pixels (-2000) to -1024 (air HU)\n    //   // Workaround hard code fix, intercept may not be always -1024\n    //   // TODO: improve it later\n    //   const pixel = obj.data[i] !== -3024 ? obj.data[i] : -1024;\n    //   // const pixel = obj.data[i];\n    //   if (!min || pixel < min) {\n    //     min = pixel;\n    //   }\n    // }\n\n    if (!this.myCanvasRef.current) {\n      console.log(\"this.myCanvasRef is not ready, return\");\n      return;\n    }\n\n    // const c = this.myCanvasRef.current; // document.getElementById(\"myCanvas\");\n    const c = document.createElement(\"canvas\");\n    c.width = width;\n    c.height = height;\n    // Create context from canvas\n    const ctx = c.getContext(\"2d\");\n    // Create ImageData object\n    if (!ctx) {\n      return;\n    }\n    const imgData = ctx.createImageData(width, height);\n    const { data } = imgData; // .data; // width x height x 4 (RGBA), Uint8ClampedArray\n\n    if (!ifRGB) {\n      const delta = max - min;\n      // Create array view\n      const array = new Uint8ClampedArray(obj.data.length);\n      for (let i = 0; i < obj.data.length; i += 1) {\n        // normalization\n        array[i] = ((obj.data[i] - min) * 255) / delta;\n      }\n      for (let i = 0, k = 0; i < data.byteLength; i += 4, k += 1) {\n        data[i] = array[k];\n        data[i + 1] = array[k];\n        data[i + 2] = array[k];\n        data[i + 3] = 255;\n      }\n    } else if (rgbMode === 0) {\n      // if 3 channels, pixel array'order is at Tag (0028, 0006)\n      // Planar Configuration = 0 -> R1, G1, B1, R2, G2, B2, …\n      // Planar Configuration = 1 -> R1, R2, R3, …, G1, G2, G3, …, B1, B2, B3\n      const array = obj.data;\n      for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n        data[i] = array[k];\n        if ((i + 2) % 4 === 0) {\n          data[i + 1] = 255;\n          i += 1;\n        }\n      }\n    } else {\n      // Note: tested. https://barre.dev/medical/samples/US-RGB-8-epicard\n      const array = obj.data;\n      const pixelCount = array.length / 3;\n      for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n        // data[i] = array[k];\n\n        const j = Math.floor(i / 4); // jth pixel, start from 0\n        if ((i + 1) % 4 === 1) {\n          // r\n          data[i] = array[j];\n        } else if ((i + 1) % 4 === 2) {\n          // g\n          data[i] = array[j + pixelCount];\n        } else if ((i + 1) % 4 === 3) {\n          // b\n          data[i] = array[j + pixelCount * 2];\n\n          data[i + 1] = 255;\n          i += 1;\n        }\n      }\n    }\n\n    // console.log(\"fill data to ctx's imagedata done, then draw our imagedata onto the canvas\")\n    ctx.putImageData(imgData, 0, 0);\n\n    const scale = this.resizeTotFit(width, height);\n    if (scale !== 1) {\n      console.log(\"scale:\", scale);\n    }\n    const c2: any = this.myCanvasRef.current;\n    c2.width = width / scale;\n    c2.height = height / scale;\n    const ctx2 = c2.getContext(\"2d\");\n    // ctx2.scale(1 / scale, 1 / scale); is equal to ctx2.drawImage(c, 0, 0)\n    ctx2.drawImage(c, 0, 0, c2.width, c2.height);\n  };\n\n  onOpenFileURLs(fileURLStr: string) {\n    // const filePath = paths[1];\n    // file:///fjdas;fjsajfajsk;lf\n    const files = fileURLStr.split(\"file://\");\n    files.sort((a, b) => {\n      return a.localeCompare(b);\n    });\n    console.log(\"sorted files:\", files);\n    this.files = [];\n    files.forEach((file, index) => {\n      if (index !== 0) {\n        this.files.push(`file://${file}`);\n      }\n    });\n    this.setState({\n      totalFiles: this.files.length,\n      currFileNo: 1,\n    });\n\n    this.fetchFile(this.files[0]);\n  }\n\n  fetchFile = (url: string) => {\n    this.setState({\n      currFilePath: decodeURI(url),\n    });\n\n    if (!this.checkDicomNameAndResetState(url)) {\n      return;\n    }\n\n    if (url.indexOf(\"file://\") === 0) {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\"GET\", url, true);\n      xhr.responseType = \"arraybuffer\";\n      xhr.onload = () => {\n        const arrayBuffer = xhr.response;\n        this.renderImage(arrayBuffer);\n      };\n      xhr.send();\n    } else {\n      // NOTE: copy from https://github.com/my-codeworks/tiff-viewer-extension/blob/master/background.js#L29\n      // TODO: figure it out why using arraybuffer will fail\n      console.log(\"Starting XHR request for\", url);\n      const request = new XMLHttpRequest();\n      request.open(\"GET\", url, false);\n      request.overrideMimeType(\"text/plain; charset=x-user-defined\");\n      request.send();\n      console.log(\"Finished XHR request\");\n      const data = request.responseText;\n      let buffer;\n      let view: DataView;\n      let a_byte;\n      buffer = new ArrayBuffer(data.length);\n      view = new DataView(buffer);\n      data.split(\"\").forEach((c, i) => {\n        a_byte = c.charCodeAt(0);\n        view.setUint8(i, a_byte & 0xff);\n      });\n      const buffer2 = view.buffer;\n      this.renderImage(buffer2);\n    }\n  };\n\n  switchImage = (value: number) => {\n    this.setState({\n      currFileNo: value,\n    });\n\n    const newFile = this.files[value - 1];\n    console.log(\"switch to image:\", value, newFile);\n\n    if (!this.isOnlineMode) {\n      this.loadFile(newFile);\n    } else {\n      this.fetchFile(newFile);\n    }\n  };\n\n  checkDicomNameAndResetState(name: string) {\n    const c2: any = this.myCanvasRef.current;\n    if (c2) {\n      console.log(\"reset canvas\");\n      const ctx2 = c2.getContext(\"2d\");\n      ctx2.clearRect(0, 0, c2.width, c2.height);\n    }\n\n    if (\n      name.toLowerCase().endsWith(\".dcm\") === false &&\n      name.toLowerCase().endsWith(\".dicom\") === false\n    ) {\n      console.log(\"not dicom file\");\n\n      this.setState({\n        ...initialImageState,\n        hasDICOMExtension: false,\n      });\n\n      return false;\n    }\n\n    this.setState({\n      ...initialImageState,\n    });\n\n    return true;\n  }\n\n  /* eslint-disable */\n  loadFile(file: any) {\n    this.setState({\n      currFilePath: file.name,\n    });\n\n    if (!this.checkDicomNameAndResetState(file.name)) {\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = () => {\n      const fileContent = reader.result;\n      this.renderImage(fileContent);\n    };\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    // e.g. \"drag a folder\" will fail to read\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.readAsArrayBuffer(file);\n  }\n\n  onDropFile = (acceptedFiles: any[]) => {\n    if (acceptedFiles.length > 0) {\n      acceptedFiles.sort((a, b) => {\n        return a.name.localeCompare(b.name);\n      });\n      this.isOnlineMode = false;\n      this.files = acceptedFiles;\n      this.setState({\n        totalFiles: this.files.length,\n        currFileNo: 1,\n      });\n      this.loadFile(this.files[0]);\n    }\n  };\n\n  handleSwitchFrame = (\n    e: React.SyntheticEvent<HTMLElement, Event>,\n    obj: DropdownProps\n  ) => {\n    const value = obj.value as number;\n\n    console.log(\"switch frame:\", value);\n\n    this.setState({\n      currFrameIndex: value,\n    });\n    this.renderFrame(this.currentImage, value);\n  };\n\n  resizeTotFit(width: number, height: number) {\n    let scale = 1;\n    const size = {\n      maxWidth: 1280,\n      maxHeight: 1024,\n    };\n    if (width <= size.maxWidth && height <= size.maxHeight) {\n      return scale;\n    }\n    const scaleW = width / size.maxWidth;\n    const scaleH = height / size.maxHeight;\n    scale = scaleW >= scaleH ? scaleW : scaleH;\n\n    return scale;\n  }\n\n  onKeyDown = (keyName: string) => {\n    const { totalFiles, currFileNo } = this.state;\n    let newFileNo = currFileNo;\n    if (totalFiles > 1) {\n      if (keyName === \"right\") {\n        newFileNo += 1;\n        if (newFileNo > totalFiles) {\n          return;\n        }\n      } else if (keyName === \"left\") {\n        newFileNo -= 1;\n        if (newFileNo < 1) {\n          return;\n        }\n      }\n    } else {\n      return;\n    }\n\n    this.switchImage(newFileNo);\n  };\n\n  onMouseCanvasDown = (event: any) => {\n    console.log(\"onMouseDown:\", event);\n    this.setState({\n      isValidMouseDown: true,\n    });\n\n    this.clientX = event.clientX;\n    this.clientY = event.clientY;\n\n    // register mouse move event\n    window.addEventListener(\"mousemove\", this.onMouseMove);\n  };\n\n  onMouseUp = (event: any) => {\n    console.log(\"onMouseUp:\", event);\n    this.setState({\n      isValidMouseDown: false,\n    });\n\n    // unregister mouse move event\n    window.removeEventListener(\"mousemove\", this.onMouseMove);\n  };\n\n  // TODO: add throttle-debounce\n  onMouseMove = (event: any) => {\n    // console.log(\"onMousemove:\", event);\n    // const { clientX, scrollLeft, scrollTop, clientY } = this.state;\n    // this._scroller.scrollLeft = scrollLeft - clientX + event.clientX;\n    // this._scroller.scrollTop = scrollTop - clientY + event.clientY;\n    const {\n      isValidMouseDown,\n      windowCenter,\n      windowWidth,\n      pixelMax,\n      pixelMin,\n      useWindowWidth,\n      useWindowCenter,\n      currFrameIndex,\n      currNormalizeMode,\n    } = this.state;\n    if (isValidMouseDown) {\n      const {\n        max,\n        min,\n        tmpWindowCenter,\n        tmpWindowWidth,\n      } = this.getNormalizationRange(\n        useWindowWidth,\n        useWindowCenter,\n        currNormalizeMode,\n        windowWidth,\n        windowCenter,\n        pixelMax,\n        pixelMin\n      );\n\n      if (tmpWindowCenter !== undefined && tmpWindowWidth !== undefined) {\n        let deltaX = event.clientX - this.clientX;\n        const deltaY = this.clientY - event.clientY;\n        // console.log(\"deltaY:\", deltaY);\n\n        let newWindowWidth = tmpWindowWidth + deltaX;\n        if (newWindowWidth <= 1) {\n          // console.log(\"newWindowWidth minus:\", newWindowWidth);\n          newWindowWidth = 2;\n          deltaX = newWindowWidth - tmpWindowWidth;\n        }\n        if (deltaX === 0 && deltaY === 0) {\n          return;\n        }\n        // console.log(\"newWindowWidth:\", newWindowWidth);\n        const newWindowCenter = tmpWindowCenter + deltaY;\n        this.setState({\n          useWindowCenter: newWindowCenter,\n          useWindowWidth: newWindowWidth,\n        });\n        this.renderFrame(\n          this.currentImage,\n          currFrameIndex,\n          currNormalizeMode,\n          newWindowWidth,\n          newWindowCenter\n          // useWindowCenter //useWindowCenter\n        );\n      }\n\n      // max/min mode\n      // default window center mode\n    }\n    this.clientX = event.clientX;\n    this.clientY = event.clientY;\n  };\n\n  getNormalizationRange(\n    useWindowWidth: number,\n    useWindowCenter: number,\n    currNormalizeMode: number,\n    windowWidth: number,\n    windowCenter: number,\n    pixelMax: number,\n    pixelMin: number\n  ) {\n    let max;\n    let min;\n    let tmpWindowCenter;\n    let tmpWindowWidth;\n    // console.log(\n    //   \"a:\",\n    //   useWindowWidth, // -1\n    //   useWindowCenter, // 0\n    //   windowWidth, // null\n    //   windowCenter // null\n    // );\n    if (useWindowWidth >= 0 && useWindowCenter !== undefined) {\n      tmpWindowCenter = useWindowCenter;\n      tmpWindowWidth = useWindowWidth;\n    } else if (currNormalizeMode === NormalizationMode.WindowCenter) {\n      if (windowWidth !== null && windowWidth >= 0 && windowCenter !== null) {\n        tmpWindowCenter = windowCenter;\n        tmpWindowWidth = windowWidth;\n      }\n    } else if (currNormalizeMode === NormalizationMode.PixelHUMaxMin) {\n    } else {\n      const data = WindowCenterWidthConst[currNormalizeMode];\n      tmpWindowCenter = data.L;\n      tmpWindowWidth = data.W;\n    }\n    if (tmpWindowWidth !== undefined && tmpWindowCenter !== undefined) {\n      min = tmpWindowCenter - Math.floor(tmpWindowWidth / 2);\n      max = tmpWindowCenter + Math.floor(tmpWindowWidth / 2);\n    } else {\n      // max/min\n      max = pixelMax;\n      min = pixelMin;\n      // ({ max, min } = obj);\n    }\n\n    // console.log(\"t:\", max, min, pixelMax, pixelMin);\n\n    return {\n      max,\n      min,\n      tmpWindowCenter,\n      tmpWindowWidth,\n    };\n  }\n\n  render() {\n    const {\n      currFilePath,\n      multiFrameInfo,\n      frameIndexes,\n      currFrameIndex,\n      ifWindowCenterMode,\n      currNormalizeMode,\n      windowCenter,\n      windowWidth,\n      pixelMax,\n      pixelMin,\n      resX,\n      resY,\n      photometric,\n      modality,\n      currFileNo,\n      totalFiles,\n      hasDICOMExtension,\n      useWindowWidth,\n      useWindowCenter,\n    } = this.state;\n    let info = \"[meta]\";\n    info += ` modality:${modality};photometric:${photometric}`;\n    if (resX && resY) {\n      info += ` resolution:${resX}x${resY}`;\n    }\n    if (multiFrameInfo) {\n      info += `; ${multiFrameInfo}`;\n    }\n\n    const {\n      max,\n      min,\n      tmpWindowCenter,\n      tmpWindowWidth,\n    } = this.getNormalizationRange(\n      useWindowWidth,\n      useWindowCenter,\n      currNormalizeMode,\n      windowWidth,\n      windowCenter,\n      pixelMax,\n      pixelMin\n    );\n\n    return (\n      <Hotkeys\n        allowRepeat\n        keyName=\"right,left\"\n        onKeyDown={this.onKeyDown}\n        // onKeyUp={this.onKeyUp.bind(this)}\n      >\n        <div className=\"flex-container\">\n          <div>\n            <div className=\"flex-container\">\n              <div>\n                DICOM Image Viewer (feat: 1. click DICOM url 2. click extension\n                icon (or ctrl+u/cmd+u) to open <br></br>viewer page 3. drag any\n                DICOM file into Chrome without opening viewer first 4.\n                <a href=\"https://github.com/grimmer0125/dicom-web-viewer/wiki\">\n                  {\" \"}\n                  More (e.g. CLI and Instruction)!\n                </a>\n              </div>\n            </div>\n            <div>\n              <div className=\"flex-container\">\n                <Dropzone\n                  preventDropOnDocument={false}\n                  style={dropZoneStyle}\n                  getDataTransferItems={(evt) => fromEvent(evt)}\n                  onDrop={this.onDropFile}\n                >\n                  <div\n                    style={{\n                      height: \"100%\",\n                      display: \"flex\",\n                      flexDirection: \"column\",\n                      justifyContent: \"center\",\n                      alignItems: \"center\",\n                    }}\n                  >\n                    <div>\n                      <p>\n                        {\" \"}\n                        Try dropping DICOM image files/folder here, <br />\n                        or click here to select files to view. <br />\n                        You need to enable file url access in extenstion DETAILS\n                        setting page. <br /> Use right/left key to switch &\n                        mouse press+move to change window center (level) <br />\n                        and widow width\n                      </p>\n                    </div>\n                  </div>\n                </Dropzone>\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                {info}\n              </div>\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div>\n                  <div className=\"flex-container\">\n                    {`pixel/HU max:${pixelMax}, min:${pixelMin}; useWindowCenter:${\n                      tmpWindowCenter ?? \"\"\n                    }, useWindowWidth:${\n                      tmpWindowWidth ?? \"\"\n                    }; Normalization mode:`}\n                    <br></br>\n                    {`(WindowCenter mode will fallback to Pixel/HU MaxMin if no value):`}\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.WindowCenter}\n                      windowItem={\n                        windowWidth >= 0\n                          ? { L: windowCenter, W: windowWidth }\n                          : undefined\n                      }\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                    <NormalizationComponent\n                      mode={NormalizationMode.PixelHUMaxMin}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.AbdomenSoftTissues}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n\n                    <NormalizationComponent\n                      mode={NormalizationMode.SpineSoftTissues}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n\n                    <NormalizationComponent\n                      mode={NormalizationMode.SpineBone}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                  </div>\n                  <div>\n                    <NormalizationComponent\n                      mode={NormalizationMode.Brain}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                    <NormalizationComponent\n                      mode={NormalizationMode.Lungs}\n                      currNormalizeMode={currNormalizeMode}\n                      onChange={this.handleNormalizeModeChange}\n                    />\n                  </div>\n                </div>\n                <div\n                  style={{\n                    display: \"flex\",\n                    justifyContent: \"center\",\n                  }}\n                >\n                  <div>\n                    {\" \"}\n                    {frameIndexes.length > 1 ? (\n                      <Dropdown\n                        placeholder=\"Switch Frame\"\n                        selection\n                        onChange={this.handleSwitchFrame}\n                        options={frameIndexes}\n                        value={currFrameIndex}\n                      />\n                    ) : null}{\" \"}\n                  </div>{\" \"}\n                </div>{\" \"}\n              </div>\n            </div>\n            {/* <div\n              style={{\n                display: \"flex\",\n                justifyContent: \"center\",\n              }}\n            >\n              {\" \"}\n              {currFilePath || null}{\" \"}\n            </div> */}\n            {totalFiles > 0 ? (\n              <div\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <div style={{ width: 600 }}>\n                  <div\n                    style={{\n                      display: \"flex\",\n                      justifyContent: \"center\",\n                    }}\n                  >\n                    {`${currFilePath}. ${currFileNo}/${totalFiles}`}\n                  </div>\n                  <Slider\n                    value={currFileNo}\n                    step={1}\n                    min={1}\n                    max={totalFiles}\n                    onChange={this.switchImage}\n                  />\n                </div>\n              </div>\n            ) : null}\n            {hasDICOMExtension ? (\n              <div\n                // onMouseDown={this.onMouseDown0}\n                // onScroll={this.onMouseMove0}\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                }}\n              >\n                <canvas\n                  onMouseDown={this.onMouseCanvasDown}\n                  // onMouseUp={this.onMouseUp0}\n                  // onScroll={this.onMouseMove}\n                  ref={this.myCanvasRef}\n                  width={128}\n                  height={128}\n                />\n              </div>\n            ) : null}\n          </div>\n        </div>\n      </Hotkeys>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}