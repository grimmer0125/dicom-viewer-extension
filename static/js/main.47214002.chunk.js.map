{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["daikon","window","dropZoneStyle","borderWidth","borderColor","borderStyle","borderRadius","width","height","textAlign","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_ref","value","setState","ifWindowCenterMode","currentImage","switchFrame","state","currentIndex","renderImage","buffer","console","log","byteLength","Parser","verbose","image","Series","parseImage","DataView","numFrames","getNumberOfFrames","fileInfo","concat","frameIndexes","Array","from","length","v","k","text","index","ifRGB","rgbMode","photometric","getPhotometricInterpretation","modality","getModality","mode","getPlanarConfig","trim","indexOf","toLowerCase","max","min","obj","getInterpretedData","numCols","numRows","windowCenter","getWindowCenter","windowWidth","getWindowWidth","resX","resY","Math","floor","i","data","myCanvasRef","current","c","document","createElement","ctx","getContext","imgData","createImageData","array","pixelCount","j","delta","Uint8ClampedArray","putImageData","scale","resizeTotFit","c2","drawImage","fetchFile","url","xhr","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","send","request","overrideMimeType","view","a_byte","responseText","ArrayBuffer","split","forEach","charCodeAt","setUint8","buffer2","onDropFile","acceptedFiles","file","filePath","name","reader","FileReader","fileContent","result","onabort","onerror","readAsArrayBuffer","handleSwitchFrame","React","createRef","location","href","paths","size","scaleW","scaleH","_this$state","info","react_default","a","className","es","preventDropOnDocument","style","onDrop","display","flexDirection","justifyContent","alignItems","Form","Field","Checkbox","radio","label","checked","onChange","Dropdown","placeholder","selection","options","ref","Component","Boolean","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.47214002.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown, Form, Checkbox } from 'semantic-ui-react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Dropzone from 'react-dropzone';\n\nconst daikon = window.daikon;\n\nconst dropZoneStyle = {\n  borderWidth: 2,\n  borderColor: '#666',\n  borderStyle: 'dashed',\n  borderRadius: 5,\n  // margin: 30,\n  // padding: 30,\n  width: 600,\n  height: 150,\n  textAlign: 'center',\n  // transition: 'all 0.5s',\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filePath: '',\n      fileInfo: '',\n      currentIndex: 0,\n      frameIndexes: [],\n      ifWindowCenterMode: true,\n      windowCenter: '',\n      windowWidth: '',\n      max: '',\n      min: '',\n      resX: '',\n      resY: '',\n      photometric: '',\n      modality: '',\n    };\n    this.myCanvasRef = React.createRef();\n  }\n\n  handleChange = (e, { value }) => {\n    if (value === 'center') {\n      this.setState({ ifWindowCenterMode: true });\n    } else {\n      this.setState({ ifWindowCenterMode: false });\n    }\n\n    if (this.currentImage) {\n      this.switchFrame(this.currentImage, this.state.currentIndex);\n    }\n  };\n\n  componentDidMount() {\n    // get file path from current url, e.g.\n    // chrome-extension://jfnlfimghfiagibfigmlopnfljpfnnje/dicom.html#file:///tmp/test.dcm\n    const url = window.location.href;\n    // 'http://localhost#http://medistim.com/wp-content/uploads/2016/07/ttfm.dcm'; //\n    // console.log(\"current url:\", url);\n\n    if (url.toLowerCase().indexOf('.dcm') !== -1 || url.toLowerCase().indexOf('.dicom') !== -1) {\n      const paths = url.split('#');\n      if (paths.length > 1) {\n        const filePath = paths[1];\n\n        // console.log(\"dicom html loads, after hash:\", filePath);\n\n        this.setState({\n          filePath,\n        });\n\n        // document.getElementById(\"file\").innerHTML = filePath;\n\n        this.fetchFile(filePath);\n      }\n    }\n  }\n\n  renderImage = (buffer) => {\n    console.log('renderImage bytelength:', buffer.byteLength);\n    if (buffer) {\n      daikon.Parser.verbose = true;\n      const image = daikon.Series.parseImage(new DataView(buffer));\n      const numFrames = image.getNumberOfFrames();\n      if (numFrames > 1) {\n        // console.log(\"frames:\", numFrames);\n        const fileInfo = `It is multi-frame file (n=${numFrames})`;\n\n        this.setState({\n          fileInfo,\n        });\n      } else {\n        this.setState({\n          fileInfo: '',\n        });\n      }\n      this.setState({\n        frameIndexes: Array.from(\n          {\n            length: numFrames,\n          },\n          (v, k) => ({\n            text: k,\n            value: k,\n          }),\n        ),\n        currentIndex: 0,\n      });\n      this.currentImage = image;\n      this.switchFrame(this.currentImage, 0);\n    }\n  };\n\n  switchFrame = (image, index) => {\n    console.log(`switch to ${index} Frame`);\n\n    let ifRGB = false;\n    let rgbMode = 0; // 0: rgbrgb... 1: rrrgggbbb\n    const photometric = image.getPhotometricInterpretation();\n    const modality = image.getModality();\n    if (photometric !== null) {\n      const mode = image.getPlanarConfig();\n      console.log('Planar mode:', mode);\n      if (photometric.trim().indexOf('RGB') !== -1) {\n        ifRGB = true;\n\n        rgbMode = image.getPlanarConfig() || 0;\n      } else if (\n        photometric\n          .trim()\n          .toLowerCase()\n          .indexOf('palette') !== -1\n      ) {\n        ifRGB = true;\n      }\n    }\n\n    // getPhotometricInterpretation\n    // https://github.com/rii-mango/Daikon/issues/4\n    // The new function will handle things like byte order, number of bytes per voxel, datatype, data scales, etc.\n    // It returns an array of floating point values. So far this is only working for plain intensity data, not RGB.\n    const obj = image.getInterpretedData(false, true, index); // obj.data: float32array\n    const width = obj.numCols;\n    const height = obj.numRows;\n    const windowCenter = image.getWindowCenter();\n    const windowWidth = image.getWindowWidth();\n    this.setState({\n      windowCenter,\n      windowWidth,\n      max: obj.max,\n      min: obj.min,\n      resX: width,\n      resY: height,\n      modality,\n      photometric,\n    });\n\n    let max;\n    let min;\n    const { ifWindowCenterMode } = this.state;\n    if (!ifWindowCenterMode) {\n      ({ max, min } = obj);\n    } else if (windowCenter && windowWidth) {\n      min = windowCenter - Math.floor(windowWidth / 2);\n      max = windowCenter + Math.floor(windowWidth / 2);\n\n      // truncate\n      for (let i = 0; i < obj.data.length; i += 1) {\n        if (obj.data[i] > max) {\n          obj.data[i] = max;\n        } else if (obj.data[i] < min) {\n          obj.data[i] = min;\n        }\n      }\n    } else {\n      console.log('no valid window center/width');\n      ({ max, min } = obj);\n    }\n\n    // little endian type of dicom data seems to be unit16, http://rii.uthscsa.edu/mango/papaya/ shows 2 byte\n    // obj.data: float32, length:262144 (if dicom image is 512x512)\n    // NOTE: 32bit -> 8 bit (use min/max to normalize to 0~255 from -1000~1000）\n    // let max = null;\n    // let min = null;\n    // for (let i = 0; i < obj.data.length; i += 1) {\n    //   const pixel = obj.data[i];\n    //   if (!max || pixel > max) {\n    //     max = pixel;\n    //   }\n    // }\n    // for (let i = 0; i < obj.data.length; i += 1) {\n    //   // Set outside-of-scan pixels (-2000) to -1024 (air HU)\n    //   // Workaround hard code fix, intercept may not be always -1024\n    //   // TODO: improve it later\n    //   const pixel = obj.data[i] !== -3024 ? obj.data[i] : -1024;\n    //   // const pixel = obj.data[i];\n    //   if (!min || pixel < min) {\n    //     min = pixel;\n    //   }\n    // }\n\n    if (!this.myCanvasRef.current) {\n      console.log('this.myCanvasRef is not ready, return');\n      return;\n    }\n\n    // const c = this.myCanvasRef.current; // document.getElementById(\"myCanvas\");\n    const c = document.createElement('canvas');\n    c.width = width;\n    c.height = height;\n    // Create context from canvas\n    const ctx = c.getContext('2d');\n    // Create ImageData object\n    const imgData = ctx.createImageData(width, height);\n    const { data } = imgData; // .data; // width x height x 4 (RGBA), Uint8ClampedArray\n\n    if (!ifRGB) {\n      const delta = max - min;\n      // Create array view\n      const array = new Uint8ClampedArray(obj.data.length);\n      for (let i = 0; i < obj.data.length; i += 1) {\n        // normalization\n        array[i] = ((obj.data[i] - min) * 255) / delta;\n      }\n      for (let i = 0, k = 0; i < data.byteLength; i += 4, k += 1) {\n        data[i] = array[k];\n        data[i + 1] = array[k];\n        data[i + 2] = array[k];\n        data[i + 3] = 255;\n      }\n    } else {\n      // if 3 channels, pixel array'order is at Tag (0028, 0006)\n      // Planar Configuration = 0 -> R1, G1, B1, R2, G2, B2, …\n      // Planar Configuration = 1 -> R1, R2, R3, …, G1, G2, G3, …, B1, B2, B3\n      if (rgbMode === 0) {\n        const array = obj.data;\n        for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n          data[i] = array[k];\n          if ((i + 2) % 4 === 0) {\n            data[i + 1] = 255;\n            i += 1;\n          }\n        }\n      } else {\n        // Note: tested. https://barre.dev/medical/samples/US-RGB-8-epicard\n        const array = obj.data;\n        const pixelCount = array.length / 3;\n        for (let i = 0, k = 0; i < data.byteLength; i += 1, k += 1) {\n          // data[i] = array[k];\n\n          const j = Math.floor(i / 4); // jth pixel, start from 0\n          if ((i + 1) % 4 === 1) {\n            // r\n            data[i] = array[j];\n          } else if ((i + 1) % 4 === 2) {\n            // g\n            data[i] = array[j + pixelCount];\n          } else if ((i + 1) % 4 === 3) {\n            // b\n            data[i] = array[j + pixelCount * 2];\n\n            data[i + 1] = 255;\n            i += 1;\n          }\n        }\n      }\n    }\n\n    // console.log(\"fill data to ctx's imagedata done, then draw our imagedata onto the canvas\")\n    ctx.putImageData(imgData, 0, 0);\n\n    const scale = this.resizeTotFit(width, height);\n    if (scale !== 1) {\n      console.log('scale:', scale);\n    }\n    const c2 = this.myCanvasRef.current;\n    c2.width = width / scale;\n    c2.height = height / scale;\n    const ctx2 = c2.getContext('2d');\n    // ctx2.scale(1 / scale, 1 / scale); is equal to ctx2.drawImage(c, 0, 0)\n    ctx2.drawImage(c, 0, 0, c2.width, c2.height);\n  };\n\n  fetchFile = (url) => {\n    if (url.indexOf('file://') === 0) {\n      const xhr = new XMLHttpRequest();\n      xhr.open('GET', url, true);\n      xhr.responseType = 'arraybuffer';\n      xhr.onload = () => {\n        const arrayBuffer = xhr.response;\n        this.renderImage(arrayBuffer);\n      };\n      xhr.send();\n    } else {\n      // NOTE: copy from https://github.com/my-codeworks/tiff-viewer-extension/blob/master/background.js#L29\n      // TODO: figure it out why using arraybuffer will fail\n      console.log('Starting XHR request for', url);\n      const request = new XMLHttpRequest();\n      request.open('GET', url, false);\n      request.overrideMimeType('text/plain; charset=x-user-defined');\n      request.send();\n      console.log('Finished XHR request');\n      const data = request.responseText;\n      let buffer;\n      let view;\n      let a_byte;\n      buffer = new ArrayBuffer(data.length);\n      view = new DataView(buffer);\n      data.split('').forEach((c, i) => {\n        a_byte = c.charCodeAt();\n        view.setUint8(i, a_byte & 0xff);\n      });\n      const buffer2 = view.buffer;\n      this.renderImage(buffer2);\n    }\n  };\n\n  onDropFile = (acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      this.setState({\n        filePath: file.name,\n      });\n\n      // acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        try {\n          // reader.result: arraybuffer\n\n          const fileContent = reader.result;\n          this.renderImage(fileContent);\n        } catch (e) {\n          console.log('parse dicom error:', e);\n        }\n      };\n      reader.onabort = () => console.log('file reading was aborted');\n      // e.g. \"drag a folder\" will fail to read\n      reader.onerror = () => console.log('file reading has failed');\n      reader.readAsArrayBuffer(file);\n    }\n  };\n\n  handleSwitchFrame = (e, obj) => {\n    const { value } = obj;\n\n    console.log('switch frame:', value);\n\n    this.setState({\n      currentIndex: value,\n    });\n    this.switchFrame(this.currentImage, value);\n  };\n\n  resizeTotFit(width, height) {\n    let scale = 1;\n    const size = {\n      maxWidth: 1280,\n      maxHeight: 1024,\n    };\n    if (width <= size.maxWidth && height <= size.maxHeight) {\n      return scale;\n    }\n    const scaleW = width / size.maxWidth;\n    const scaleH = height / size.maxHeight;\n    scale = scaleW >= scaleH ? scaleW : scaleH;\n\n    return scale;\n  }\n\n  render() {\n    const {\n      filePath,\n      fileInfo,\n      frameIndexes,\n      currentIndex,\n      ifWindowCenterMode,\n      windowCenter,\n      windowWidth,\n      max,\n      min,\n      resX,\n      resY,\n      photometric,\n      modality,\n    } = this.state;\n    let info = '[Info]';\n    info += ` modality:${modality};photometric:${photometric}`;\n    if (resX && resY) {\n      info += ` resolution:${resX}x${resY}`;\n    }\n    return (\n      <div className=\"flex-container\">\n        <div>\n          <div>DICOM Image Viewer </div>\n          <div>\n            <Dropzone preventDropOnDocument={false} style={dropZoneStyle} onDrop={this.onDropFile}>\n              <div\n                style={{\n                  height: '100%',\n                  display: 'flex',\n                  flexDirection: 'column',\n                  justifyContent: 'center',\n                  alignItems: 'center',\n                }}\n              >\n                <div>\n                  <p>\n                    {' '}\n                    Try dropping DICOM image files here, <br />\n                    or click here to select files to view.\n                  </p>\n                </div>\n              </div>\n            </Dropzone>\n            {info}\n            <Form>\n              <Form.Field>\n                <Checkbox\n                  radio\n                  label=\"Window Center Mode (default)\"\n                  name=\"checkboxRadioGroup\"\n                  value=\"center\"\n                  checked={ifWindowCenterMode}\n                  onChange={this.handleChange}\n                />\n                {` c:${windowCenter};w:${windowWidth}`}\n              </Form.Field>\n              <Form.Field>\n                <Checkbox\n                  radio\n                  label=\"Max/Min Mode\"\n                  name=\"checkboxRadioGroup\"\n                  value=\"max\"\n                  checked={!ifWindowCenterMode}\n                  onChange={this.handleChange}\n                />\n                {` max:${max};min:${min}`}\n              </Form.Field>\n            </Form>\n          </div>\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            {' '}\n            {filePath || null}{' '}\n          </div>{' '}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <div> {fileInfo || null} </div>{' '}\n            <div>\n              {' '}\n              {frameIndexes.length > 1 ? (\n                <Dropdown\n                  placeholder=\"Switch Frame\"\n                  selection\n                  onChange={this.handleSwitchFrame}\n                  options={frameIndexes}\n                  value={currentIndex}\n                />\n              ) : null}{' '}\n            </div>{' '}\n          </div>{' '}\n          <div\n            style={{\n              display: 'flex',\n              justifyContent: 'center',\n            }}\n          >\n            <canvas ref={this.myCanvasRef} width={128} height={128} />\n          </div>{' '}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}