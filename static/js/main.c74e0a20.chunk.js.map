{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["daikon","window","dropZoneStyle","borderWidth","borderColor","borderStyle","borderRadius","width","height","textAlign","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderImage","buffer","Parser","verbose","image","Series","parseImage","DataView","numFrames","getNumberOfFrames","fileInfo","concat","setState","frameIndexes","Array","from","length","v","k","text","value","currentIndex","currentImage","switchFrame","index","obj","getInterpretedData","numCols","numRows","max","data","min","i","delta","array","Uint8ClampedArray","myCanvasRef","current","c","ctx","getContext","imgData","createImageData","console","log","byteLength","putImageData","fetchLocalFile","url","xhr","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","send","onDropFile","acceptedFiles","file","filePath","name","reader","FileReader","fileContent","result","e","onabort","onerror","readAsArrayBuffer","handleSwitchFrame","state","React","createRef","location","href","indexOf","paths","split","_this$state","react_default","a","createElement","className","es","preventDropOnDocument","style","onDrop","display","flexDirection","justifyContent","alignItems","Dropdown","placeholder","selection","onChange","options","ref","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c74e0a20.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Dropdown } from 'semantic-ui-react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Dropzone from 'react-dropzone';\n\nconst daikon = window.daikon;\n\nconst dropZoneStyle = {\n  borderWidth: 2,\n  borderColor: '#666',\n  borderStyle: 'dashed',\n  borderRadius: 5,\n  // margin: 30,\n  // padding: 30,\n  width: 600,\n  height: 150,\n  textAlign: 'center',\n  // transition: 'all 0.5s',\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filePath: '',\n      fileInfo: '',\n      currentIndex: 0,\n      frameIndexes: [],\n    };\n    this.myCanvasRef = React.createRef();\n  }\n\n  componentDidMount() {\n    // get file path from current url, e.g.\n    // chrome-extension://jfnlfimghfiagibfigmlopnfljpfnnje/dicom.html#file:///tmp/test.dcm\n    const url = window.location.href;\n    console.log('current url:', url);\n\n    if (url.indexOf('file://') !== -1\n        && url.indexOf('.dcm') !== -1) {\n      const paths = url.split('#');\n      if (paths.length > 1) {\n        const filePath = paths[1];\n\n        // console.log(\"dicom html loads, after hash:\", filePath);\n\n        this.setState({\n          filePath,\n        });\n\n        // document.getElementById(\"file\").innerHTML = filePath;\n\n        this.fetchLocalFile(filePath);\n      }\n    }\n  }\n\n  renderImage = (buffer) => {\n    if (buffer) {\n      daikon.Parser.verbose = true;\n      const image = daikon.Series.parseImage(new DataView(buffer));\n\n      const numFrames = image.getNumberOfFrames();\n      if (numFrames > 1) {\n        // console.log(\"frames:\", numFrames);\n        const fileInfo = `It is multi-frame file (n=${numFrames})`;\n\n        this.setState({\n          fileInfo,\n        });\n      } else {\n        this.setState({\n          fileInfo: '',\n        });\n      }\n      this.setState({\n        frameIndexes: Array.from({ length: numFrames }, (v, k) => ({ text: k, value: k })),\n        currentIndex: 0,\n      });\n      this.currentImage = image;\n      this.switchFrame(this.currentImage, 0);\n    }\n  }\n\n  switchFrame = (image, index) => {\n    // NOTE: start to render the real dicom image content\n    const obj = image.getInterpretedData(false, true, index); // obj.data: float32array\n\n    const width = obj.numCols;\n    const height = obj.numRows;\n\n    // little endian type of dicom data seems to be unit16, http://rii.uthscsa.edu/mango/papaya/ shows 2 byte\n    // obj.data: float32, length:262144 (if dicom image is 512x512)\n    // NOTE: 32bit -> 8 bit (use min/max to normalize to 0~255 from -1000~1000ï¼‰\n    let max = obj.data[0];\n    let min = obj.data[0];\n    for (let i = 0; i < obj.data.length; i += 1) {\n      if (obj.data[i] > max) {\n        max = obj.data[i];\n      }\n    }\n    for (let i = 0; i < obj.data.length; i += 1) {\n      if (obj.data[i] < min) {\n        min = obj.data[i];\n      }\n    }\n    const delta = max - min;\n    // Create array view\n    const array = new Uint8ClampedArray(obj.data.length);\n    for (let i = 0; i < obj.data.length; i += 1) {\n      array[i] = (obj.data[i] - min) * 255 / delta;\n    }\n\n    if (!this.myCanvasRef.current) {\n      console.log('this.myCanvasRef is not ready, return');\n      return;\n    }\n\n    const c = this.myCanvasRef.current; // document.getElementById(\"myCanvas\");\n    // resize canvas to fit DICOM image\n    c.width = width;\n    c.height = height;\n\n    // Create context from canvas\n    const ctx = c.getContext('2d');\n\n    // Create ImageData object\n    const imgData = ctx.createImageData(width, height);\n    const { data } = imgData;// .data; // width x height x 4 (RGBA), Uint8ClampedArray\n    console.log(data.byteLength);\n\n    for (let i = 0, k = 0; i < data.byteLength; i += 4, k += 1) {\n      data[i] = array[k];\n      data[i + 1] = array[k];\n      data[i + 2] = array[k];\n      data[i + 3] = 255;\n    }\n\n    // console.log(\"fill data to ctx's imagedata done, then draw our imagedata onto the canvas\")\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  fetchLocalFile = (url) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = () => {\n      // console.log(\"e:\", e) // ProgressEvent\n      const arrayBuffer = xhr.response;\n      this.renderImage(arrayBuffer);\n    };\n\n    xhr.send();\n  }\n\n  onDropFile = (acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      this.setState({\n        filePath: file.name,\n      });\n\n      // acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        try {\n          // reader.result: arraybuffer\n\n          const fileContent = reader.result;\n          this.renderImage(fileContent);\n        } catch (e) {\n          console.log('parse dicom error:', e);\n        }\n      };\n      reader.onabort = () => console.log('file reading was aborted');\n      // e.g. \"drag a folder\" will fail to read\n      reader.onerror = () => console.log('file reading has failed');\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  handleSwitchFrame = (e, obj) => {\n    const { value } = obj;\n\n    console.log('switch frame:', value);\n\n    this.setState({ currentIndex: value });\n    this.switchFrame(this.currentImage, value);\n  }\n\n  render() {\n    const {\n      filePath, fileInfo, frameIndexes, currentIndex,\n    } = this.state;\n    return (\n      <div className=\"flex-container\">\n        <div>\n          <div>\n              DICOM Image Viewer\n          </div>\n          <div>\n            <Dropzone preventDropOnDocument={false} style={dropZoneStyle} onDrop={this.onDropFile}>\n              <div style={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n              >\n                <div>\n                  <p>\n                    {' '}\nTry dropping DICOM image files here,\n                    <br />\nor click here to select files to view.\n                  </p>\n                </div>\n              </div>\n            </Dropzone>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            {filePath || null}\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <div>\n              {fileInfo || null}\n            </div>\n            <div>\n              {frameIndexes.length > 1 ? (\n                <Dropdown\n                  placeholder=\"Switch Frame\"\n                  selection\n                  onChange={this.handleSwitchFrame}\n                  options={frameIndexes}\n                  value={currentIndex}\n                />\n              ) : null}\n            </div>\n          </div>\n          <div style={{ display: 'flex', justifyContent: 'center' }}>\n            <canvas\n              ref={this.myCanvasRef}\n              width=\"128\"\n              height=\"128\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}