{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["daikon","window","dropZoneStyle","borderWidth","borderColor","borderStyle","borderRadius","width","height","textAlign","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","renderImage","buffer","Parser","verbose","image","Series","parseImage","DataView","numFrames","getNumberOfFrames","fileInfo","concat","setState","obj","getInterpretedData","numCols","numRows","max","data","min","i","length","delta","array","Uint8ClampedArray","myCanvasRef","current","console","log","c","ctx","getContext","imgData","createImageData","byteLength","k","putImageData","fetchLocalFile","url","xhr","XMLHttpRequest","open","responseType","onload","e","arrayBuffer","response","send","onDropFile","acceptedFiles","file","state","filePath","name","reader","FileReader","fileContent","result","onabort","onerror","readAsArrayBuffer","React","createRef","location","href","indexOf","paths","split","_this$state","react_default","a","createElement","className","es","preventDropOnDocument","style","onDrop","display","flexDirection","justifyContent","alignItems","ref","Component","Boolean","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9ed8f0e3.chunk.js","sourcesContent":["import React, { Component } from 'react';\n// import logo from './logo.svg';\n// import './App.css';\n\nimport Dropzone from 'react-dropzone';\n\nconst daikon = window.daikon;\n\nconst dropZoneStyle = {\n  borderWidth: 2,\n  borderColor: '#666',\n  borderStyle: 'dashed',\n  borderRadius: 5,\n  // margin: 30,\n  // padding: 30,\n  width: 600,\n  height: 150,\n  textAlign: 'center',\n  // transition: 'all 0.5s',\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      filePath: 'a',\n      fileInfo: '',\n    };\n    this.myCanvasRef = React.createRef();\n\n    // get file path from current url, e.g.\n    // chrome-extension://jfnlfimghfiagibfigmlopnfljpfnnje/dicom.html#file:///tmp/test.dcm\n    const url = window.location.href;\n    // console.log(\"current url:\", url);\n\n    if (url.indexOf('file://') !== -1\n        && url.indexOf('.dcm') !== -1) {\n      const paths = url.split('#');\n      if (paths.length > 1) {\n        const filePath = paths[1];\n\n        // console.log(\"dicom html loads, after hash:\", filePath);\n\n        this.state = {\n          filePath,\n          fileInfo: '',\n        };\n\n        // document.getElementById(\"file\").innerHTML = filePath;\n\n        this.fetchLocalFile(filePath);\n      }\n    }\n  }\n\n  renderImage = (buffer) => {\n    if (buffer) {\n      daikon.Parser.verbose = true;\n      const image = daikon.Series.parseImage(new DataView(buffer));\n\n      const numFrames = image.getNumberOfFrames();\n      if (numFrames > 1) {\n        // console.log(\"frames:\", numFrames);\n        const fileInfo = `It is multi-frame file (n=${numFrames}) and only show the 1st frame currently`;\n\n        this.setState({\n          fileInfo,\n        });\n        // document.getElementById(\"file_info\").innerHTML = file_info;\n      }\n\n      // TODO: add options to switch other frame if it is multi-frame\n      // getInterpretedData(asArray, asObject, frameIndex)\n      // NOTE: start to render the real dicom image content\n      const obj = image.getInterpretedData(false, true, 0); // obj.data: float32array\n\n      const width = obj.numCols;\n      const height = obj.numRows;\n\n      // little endian type of dicom data seems to be unit16, http://rii.uthscsa.edu/mango/papaya/ shows 2 byte\n      // obj.data: float32, length:262144 (if dicom image is 512x512)\n      // NOTE: 32bit -> 8 bit (use min/max to normalize to 0~255 from -1000~1000ï¼‰\n      let max = obj.data[0];\n      let min = obj.data[0];\n      for (let i = 0; i < obj.data.length; i++) {\n        if (obj.data[i] > max) {\n          max = obj.data[i];\n        }\n      }\n      for (let i = 0; i < obj.data.length; i++) {\n        if (obj.data[i] < min) {\n          min = obj.data[i];\n        }\n      }\n      const delta = max - min;\n      // Create array view\n      const array = new Uint8ClampedArray(obj.data.length);\n      for (let i = 0; i < obj.data.length; i++) {\n        array[i] = (obj.data[i] - min) * 255 / delta;\n      }\n\n      if (!this.myCanvasRef.current) {\n        console.log('this.myCanvasRef is not ready, return');\n        return;\n      }\n\n      const c = this.myCanvasRef.current; // document.getElementById(\"myCanvas\");\n      // resize canvas to fit DICOM image\n      c.width = width;\n      c.height = height;\n\n      // Create context from canvas\n      const ctx = c.getContext('2d');\n\n      // Create ImageData object\n      const imgData = ctx.createImageData(width, height);\n      const { data } = imgData;// .data; // width x height x 4 (RGBA), Uint8ClampedArray\n      console.log(data.byteLength);\n\n      for (let i = 0, k = 0; i < data.byteLength; i += 4, k += 1) {\n        data[i] = array[k];\n        data[i + 1] = array[k];\n        data[i + 2] = array[k];\n        data[i + 3] = 255;\n      }\n\n      // console.log(\"fill data to ctx's imagedata done, then draw our imagedata onto the canvas\")\n      ctx.putImageData(imgData, 0, 0);\n    }\n  }\n\n  fetchLocalFile = (url) => {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = (e) => {\n      // console.log(\"e:\", e) // ProgressEvent\n      const arrayBuffer = xhr.response;\n      this.renderImage(arrayBuffer);\n    };\n\n    xhr.send();\n  }\n\n  onDropFile = (acceptedFiles) => {\n    if (acceptedFiles.length > 0) {\n      const file = acceptedFiles[0];\n      console.log('this.state:', this.state);\n      this.setState({\n        filePath: file.name,\n      });\n\n      // acceptedFiles.forEach((file) => {\n      const reader = new FileReader();\n      reader.onload = () => {\n        try {\n          // reader.result: arraybuffer\n\n          const fileContent = reader.result;\n          this.renderImage(fileContent);\n        } catch (e) {\n          console.log('parse dicom error:', e);\n        }\n      };\n      reader.onabort = () => console.log('file reading was aborted');\n      // e.g. \"drag a folder\" will fail to read\n      reader.onerror = () => console.log('file reading has failed');\n      reader.readAsArrayBuffer(file);\n    }\n  }\n\n  render() {\n    console.log('this.state:', this.state);\n    const { filePath, fileInfo } = this.state;\n    return (\n      <div className=\"flex-container\">\n        <div>\n          <div>\n              DICOM Image Viewer\n          </div>\n          <div>\n            <Dropzone preventDropOnDocument={false} style={dropZoneStyle} onDrop={this.onDropFile}>\n              <div style={{\n                height: '100%',\n                display: 'flex',\n                flexDirection: 'column',\n                justifyContent: 'center',\n                alignItems: 'center',\n              }}\n              >\n                <div>\n                  <p>\n                    {' '}\nTry dropping DICOM image files here,\n                    <br />\nor click here to select files to upload.\n                  </p>\n                </div>\n              </div>\n            </Dropzone>\n          </div>\n          <div>\n            {filePath || null}\n          </div>\n          <div>\n            {fileInfo || null}\n          </div>\n          <div>\n            <canvas\n              ref={this.myCanvasRef}\n              width=\"128\"\n              height=\"128\"\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}